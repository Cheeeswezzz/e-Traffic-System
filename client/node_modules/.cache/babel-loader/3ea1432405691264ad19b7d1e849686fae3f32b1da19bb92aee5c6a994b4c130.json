{"ast":null,"code":"import _objectSpread from \"C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _assertClassBrand from \"C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _initialState, _revertState, _cache, _client, _retryer, _defaultOptions, _abortSignalConsumed, _Class_brand;\n// src/query.ts\nimport { ensureQueryFn, noop, replaceData, resolveEnabled, resolveStaleTime, skipToken, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { canFetch, createRetryer, isCancelledError } from \"./retryer.js\";\nimport { Removable } from \"./removable.js\";\nvar Query = (_initialState = /*#__PURE__*/new WeakMap(), _revertState = /*#__PURE__*/new WeakMap(), _cache = /*#__PURE__*/new WeakMap(), _client = /*#__PURE__*/new WeakMap(), _retryer = /*#__PURE__*/new WeakMap(), _defaultOptions = /*#__PURE__*/new WeakMap(), _abortSignalConsumed = /*#__PURE__*/new WeakMap(), _Class_brand = /*#__PURE__*/new WeakSet(), class Query extends Removable {\n  constructor(config) {\n    var _config$state;\n    super();\n    _classPrivateMethodInitSpec(this, _Class_brand);\n    _classPrivateFieldInitSpec(this, _initialState, void 0);\n    _classPrivateFieldInitSpec(this, _revertState, void 0);\n    _classPrivateFieldInitSpec(this, _cache, void 0);\n    _classPrivateFieldInitSpec(this, _client, void 0);\n    _classPrivateFieldInitSpec(this, _retryer, void 0);\n    _classPrivateFieldInitSpec(this, _defaultOptions, void 0);\n    _classPrivateFieldInitSpec(this, _abortSignalConsumed, void 0);\n    _classPrivateFieldSet(_abortSignalConsumed, this, false);\n    _classPrivateFieldSet(_defaultOptions, this, config.defaultOptions);\n    this.setOptions(config.options);\n    this.observers = [];\n    _classPrivateFieldSet(_client, this, config.client);\n    _classPrivateFieldSet(_cache, this, _classPrivateFieldGet(_client, this).getQueryCache());\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    _classPrivateFieldSet(_initialState, this, getDefaultState(this.options));\n    this.state = (_config$state = config.state) !== null && _config$state !== void 0 ? _config$state : _classPrivateFieldGet(_initialState, this);\n    this.scheduleGc();\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  get promise() {\n    var _classPrivateFieldGet2;\n    return (_classPrivateFieldGet2 = _classPrivateFieldGet(_retryer, this)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.promise;\n  }\n  setOptions(options) {\n    this.options = _objectSpread(_objectSpread({}, _classPrivateFieldGet(_defaultOptions, this)), options);\n    this.updateGcTime(this.options.gcTime);\n  }\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n      _classPrivateFieldGet(_cache, this).remove(this);\n    }\n  }\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options);\n    _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n      data,\n      type: \"success\",\n      dataUpdatedAt: options === null || options === void 0 ? void 0 : options.updatedAt,\n      manual: options === null || options === void 0 ? void 0 : options.manual\n    });\n    return data;\n  }\n  setState(state, setStateOptions) {\n    _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n      type: \"setState\",\n      state,\n      setStateOptions\n    });\n  }\n  cancel(options) {\n    var _classPrivateFieldGet3, _classPrivateFieldGet4;\n    const promise = (_classPrivateFieldGet3 = _classPrivateFieldGet(_retryer, this)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.promise;\n    (_classPrivateFieldGet4 = _classPrivateFieldGet(_retryer, this)) === null || _classPrivateFieldGet4 === void 0 || _classPrivateFieldGet4.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n  destroy() {\n    super.destroy();\n    this.cancel({\n      silent: true\n    });\n  }\n  reset() {\n    this.destroy();\n    this.setState(_classPrivateFieldGet(_initialState, this));\n  }\n  isActive() {\n    return this.observers.some(observer => resolveEnabled(observer.options.enabled, this) !== false);\n  }\n  isDisabled() {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive();\n    }\n    return this.options.queryFn === skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;\n  }\n  isStatic() {\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(observer => resolveStaleTime(observer.options.staleTime, this) === \"static\");\n    }\n    return false;\n  }\n  isStale() {\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(observer => observer.getCurrentResult().isStale);\n    }\n    return this.state.data === void 0 || this.state.isInvalidated;\n  }\n  isStaleByTime() {\n    let staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (this.state.data === void 0) {\n      return true;\n    }\n    if (staleTime === \"static\") {\n      return false;\n    }\n    if (this.state.isInvalidated) {\n      return true;\n    }\n    return !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n  onFocus() {\n    var _classPrivateFieldGet5;\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus());\n    observer === null || observer === void 0 || observer.refetch({\n      cancelRefetch: false\n    });\n    (_classPrivateFieldGet5 = _classPrivateFieldGet(_retryer, this)) === null || _classPrivateFieldGet5 === void 0 || _classPrivateFieldGet5.continue();\n  }\n  onOnline() {\n    var _classPrivateFieldGet6;\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect());\n    observer === null || observer === void 0 || observer.refetch({\n      cancelRefetch: false\n    });\n    (_classPrivateFieldGet6 = _classPrivateFieldGet(_retryer, this)) === null || _classPrivateFieldGet6 === void 0 || _classPrivateFieldGet6.continue();\n  }\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer);\n      this.clearGcTimeout();\n      _classPrivateFieldGet(_cache, this).notify({\n        type: \"observerAdded\",\n        query: this,\n        observer\n      });\n    }\n  }\n  removeObserver(observer) {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter(x => x !== observer);\n      if (!this.observers.length) {\n        if (_classPrivateFieldGet(_retryer, this)) {\n          if (_classPrivateFieldGet(_abortSignalConsumed, this)) {\n            _classPrivateFieldGet(_retryer, this).cancel({\n              revert: true\n            });\n          } else {\n            _classPrivateFieldGet(_retryer, this).cancelRetry();\n          }\n        }\n        this.scheduleGc();\n      }\n      _classPrivateFieldGet(_cache, this).notify({\n        type: \"observerRemoved\",\n        query: this,\n        observer\n      });\n    }\n  }\n  getObserversCount() {\n    return this.observers.length;\n  }\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n        type: \"invalidate\"\n      });\n    }\n  }\n  fetch(options, fetchOptions) {\n    var _this$options$behavio, _context$fetchOptions;\n    if (this.state.fetchStatus !== \"idle\") {\n      if (this.state.data !== void 0 && fetchOptions !== null && fetchOptions !== void 0 && fetchOptions.cancelRefetch) {\n        this.cancel({\n          silent: true\n        });\n      } else if (_classPrivateFieldGet(_retryer, this)) {\n        _classPrivateFieldGet(_retryer, this).continueRetry();\n        return _classPrivateFieldGet(_retryer, this).promise;\n      }\n    }\n    if (options) {\n      this.setOptions(options);\n    }\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn);\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n      }\n    }\n    const abortController = new AbortController();\n    const addSignalProperty = object => {\n      Object.defineProperty(object, \"signal\", {\n        enumerable: true,\n        get: () => {\n          _classPrivateFieldSet(_abortSignalConsumed, this, true);\n          return abortController.signal;\n        }\n      });\n    };\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions);\n      const createQueryFnContext = () => {\n        const queryFnContext2 = {\n          client: _classPrivateFieldGet(_client, this),\n          queryKey: this.queryKey,\n          meta: this.meta\n        };\n        addSignalProperty(queryFnContext2);\n        return queryFnContext2;\n      };\n      const queryFnContext = createQueryFnContext();\n      _classPrivateFieldSet(_abortSignalConsumed, this, false);\n      if (this.options.persister) {\n        return this.options.persister(queryFn, queryFnContext, this);\n      }\n      return queryFn(queryFnContext);\n    };\n    const createFetchContext = () => {\n      const context2 = {\n        fetchOptions,\n        options: this.options,\n        queryKey: this.queryKey,\n        client: _classPrivateFieldGet(_client, this),\n        state: this.state,\n        fetchFn\n      };\n      addSignalProperty(context2);\n      return context2;\n    };\n    const context = createFetchContext();\n    (_this$options$behavio = this.options.behavior) === null || _this$options$behavio === void 0 || _this$options$behavio.onFetch(context, this);\n    _classPrivateFieldSet(_revertState, this, this.state);\n    if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) === null || _context$fetchOptions === void 0 ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n      _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n        type: \"fetch\",\n        meta: (_context$fetchOptions2 = context.fetchOptions) === null || _context$fetchOptions2 === void 0 ? void 0 : _context$fetchOptions2.meta\n      });\n    }\n    const onError = error => {\n      if (!(isCancelledError(error) && error.silent)) {\n        _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n          type: \"error\",\n          error\n        });\n      }\n      if (!isCancelledError(error)) {\n        var _classPrivateFieldGet7, _classPrivateFieldGet8, _classPrivateFieldGet9, _classPrivateFieldGet0;\n        (_classPrivateFieldGet7 = (_classPrivateFieldGet8 = _classPrivateFieldGet(_cache, this).config).onError) === null || _classPrivateFieldGet7 === void 0 || _classPrivateFieldGet7.call(_classPrivateFieldGet8, error, this);\n        (_classPrivateFieldGet9 = (_classPrivateFieldGet0 = _classPrivateFieldGet(_cache, this).config).onSettled) === null || _classPrivateFieldGet9 === void 0 || _classPrivateFieldGet9.call(_classPrivateFieldGet0, this.state.data, error, this);\n      }\n      this.scheduleGc();\n    };\n    _classPrivateFieldSet(_retryer, this, createRetryer({\n      initialPromise: fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.initialPromise,\n      fn: context.fetchFn,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: data => {\n        var _classPrivateFieldGet1, _classPrivateFieldGet10, _classPrivateFieldGet11, _classPrivateFieldGet12;\n        if (data === void 0) {\n          if (process.env.NODE_ENV !== \"production\") {\n            console.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \".concat(this.queryHash));\n          }\n          onError(new Error(\"\".concat(this.queryHash, \" data is undefined\")));\n          return;\n        }\n        try {\n          this.setData(data);\n        } catch (error) {\n          onError(error);\n          return;\n        }\n        (_classPrivateFieldGet1 = (_classPrivateFieldGet10 = _classPrivateFieldGet(_cache, this).config).onSuccess) === null || _classPrivateFieldGet1 === void 0 || _classPrivateFieldGet1.call(_classPrivateFieldGet10, data, this);\n        (_classPrivateFieldGet11 = (_classPrivateFieldGet12 = _classPrivateFieldGet(_cache, this).config).onSettled) === null || _classPrivateFieldGet11 === void 0 || _classPrivateFieldGet11.call(_classPrivateFieldGet12, data, this.state.error, this);\n        this.scheduleGc();\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n          type: \"failed\",\n          failureCount,\n          error\n        });\n      },\n      onPause: () => {\n        _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n          type: \"pause\"\n        });\n      },\n      onContinue: () => {\n        _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n          type: \"continue\"\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true\n    }));\n    return _classPrivateFieldGet(_retryer, this).start();\n  }\n});\nfunction _dispatch(action) {\n  const reducer = state => {\n    var _action$meta, _action$dataUpdatedAt;\n    switch (action.type) {\n      case \"failed\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchFailureCount: action.failureCount,\n          fetchFailureReason: action.error\n        });\n      case \"pause\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchStatus: \"paused\"\n        });\n      case \"continue\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchStatus: \"fetching\"\n        });\n      case \"fetch\":\n        return _objectSpread(_objectSpread(_objectSpread({}, state), fetchState(state.data, this.options)), {}, {\n          fetchMeta: (_action$meta = action.meta) !== null && _action$meta !== void 0 ? _action$meta : null\n        });\n      case \"success\":\n        _classPrivateFieldSet(_revertState, this, void 0);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) !== null && _action$dataUpdatedAt !== void 0 ? _action$dataUpdatedAt : Date.now(),\n          error: null,\n          isInvalidated: false,\n          status: \"success\"\n        }, !action.manual && {\n          fetchStatus: \"idle\",\n          fetchFailureCount: 0,\n          fetchFailureReason: null\n        });\n      case \"error\":\n        const error = action.error;\n        if (isCancelledError(error) && error.revert && _classPrivateFieldGet(_revertState, this)) {\n          return _objectSpread(_objectSpread({}, _classPrivateFieldGet(_revertState, this)), {}, {\n            fetchStatus: \"idle\"\n          });\n        }\n        return _objectSpread(_objectSpread({}, state), {}, {\n          error,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          fetchFailureReason: error,\n          fetchStatus: \"idle\",\n          status: \"error\"\n        });\n      case \"invalidate\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isInvalidated: true\n        });\n      case \"setState\":\n        return _objectSpread(_objectSpread({}, state), action.state);\n    }\n  };\n  this.state = reducer(this.state);\n  notifyManager.batch(() => {\n    this.observers.forEach(observer => {\n      observer.onQueryUpdate();\n    });\n    _classPrivateFieldGet(_cache, this).notify({\n      query: this,\n      type: \"updated\",\n      action\n    });\n  });\n}\nfunction fetchState(data, options) {\n  return _objectSpread({\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? \"fetching\" : \"paused\"\n  }, data === void 0 && {\n    error: null,\n    status: \"pending\"\n  });\n}\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n  const hasData = data !== void 0;\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt !== null && initialDataUpdatedAt !== void 0 ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? \"success\" : \"pending\",\n    fetchStatus: \"idle\"\n  };\n}\nexport { Query, fetchState };","map":{"version":3,"names":["ensureQueryFn","noop","replaceData","resolveEnabled","resolveStaleTime","skipToken","timeUntilStale","notifyManager","canFetch","createRetryer","isCancelledError","Removable","Query","_initialState","WeakMap","_revertState","_cache","_client","_retryer","_defaultOptions","_abortSignalConsumed","_Class_brand","WeakSet","constructor","config","_config$state","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","defaultOptions","setOptions","options","observers","client","_classPrivateFieldGet","getQueryCache","queryKey","queryHash","getDefaultState","state","scheduleGc","meta","promise","_classPrivateFieldGet2","_objectSpread","updateGcTime","gcTime","optionalRemove","length","fetchStatus","remove","setData","newData","data","_assertClassBrand","_dispatch","call","type","dataUpdatedAt","updatedAt","manual","setState","setStateOptions","cancel","_classPrivateFieldGet3","_classPrivateFieldGet4","then","catch","Promise","resolve","destroy","silent","reset","isActive","some","observer","enabled","isDisabled","getObserversCount","queryFn","dataUpdateCount","errorUpdateCount","isStatic","staleTime","isStale","getCurrentResult","isInvalidated","isStaleByTime","arguments","undefined","onFocus","_classPrivateFieldGet5","find","x","shouldFetchOnWindowFocus","refetch","cancelRefetch","continue","onOnline","_classPrivateFieldGet6","shouldFetchOnReconnect","addObserver","includes","push","clearGcTimeout","notify","query","removeObserver","filter","revert","cancelRetry","invalidate","fetch","fetchOptions","_this$options$behavio","_context$fetchOptions","continueRetry","process","env","NODE_ENV","Array","isArray","console","error","abortController","AbortController","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","fetchFn","createQueryFnContext","queryFnContext2","queryFnContext","persister","createFetchContext","context2","context","behavior","onFetch","fetchMeta","_context$fetchOptions2","onError","_classPrivateFieldGet7","_classPrivateFieldGet8","_classPrivateFieldGet9","_classPrivateFieldGet0","onSettled","initialPromise","fn","abort","bind","onSuccess","_classPrivateFieldGet1","_classPrivateFieldGet10","_classPrivateFieldGet11","_classPrivateFieldGet12","concat","Error","onFail","failureCount","onPause","onContinue","retry","retryDelay","networkMode","canRun","start","action","reducer","_action$meta","_action$dataUpdatedAt","fetchFailureCount","fetchFailureReason","fetchState","Date","now","status","errorUpdatedAt","batch","forEach","onQueryUpdate","initialData","hasData","initialDataUpdatedAt"],"sources":["C:\\Users\\Marcelo\\OneDrive\\Documents\\Desktop\\e-traffic system\\client\\node_modules\\@tanstack\\query-core\\src\\query.ts"],"sourcesContent":["import {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  skipToken,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type { QueryCache } from './queryCache'\nimport type { QueryClient } from './queryClient'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n  StaleTime,\n} from './types'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  client: QueryClient\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  client: QueryClient\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions<TData = unknown> {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n  initialPromise?: Promise<TData>\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #client: QueryClient\n  #retryer?: Retryer<TData>\n  observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.#client = config.client\n    this.#cache = this.#client.getQueryCache()\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = getDefaultState(this.options)\n    this.state = config.state ?? this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  get promise(): Promise<TData> | undefined {\n    return this.#retryer?.promise\n  }\n\n  setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#retryer?.promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive()\n    }\n    // if a query has no observers, it should still be considered disabled if it never attempted a fetch\n    return (\n      this.options.queryFn === skipToken ||\n      this.state.dataUpdateCount + this.state.errorUpdateCount === 0\n    )\n  }\n\n  isStatic(): boolean {\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) =>\n          resolveStaleTime(observer.options.staleTime, this) === 'static',\n      )\n    }\n\n    return false\n  }\n\n  isStale(): boolean {\n    // check observers first, their `isStale` has the source of truth\n    // calculated with `isStaleByTime` and it takes `enabled` into account\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale,\n      )\n    }\n\n    return this.state.data === undefined || this.state.isInvalidated\n  }\n\n  isStaleByTime(staleTime: StaleTime = 0): boolean {\n    // no data is always stale\n    if (this.state.data === undefined) {\n      return true\n    }\n    // static is never stale\n    if (staleTime === 'static') {\n      return false\n    }\n    // if the query is invalidated, it is stale\n    if (this.state.isInvalidated) {\n      return true\n    }\n\n    return !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions<TQueryFnData>,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.data !== undefined && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetch\n        this.cancel({ silent: true })\n      } else if (this.#retryer) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#retryer.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    // Create fetch function\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions)\n\n      // Create query function context\n      const createQueryFnContext = (): QueryFunctionContext<TQueryKey> => {\n        const queryFnContext: OmitKeyof<\n          QueryFunctionContext<TQueryKey>,\n          'signal'\n        > = {\n          client: this.#client,\n          queryKey: this.queryKey,\n          meta: this.meta,\n        }\n        addSignalProperty(queryFnContext)\n        return queryFnContext as QueryFunctionContext<TQueryKey>\n      }\n\n      const queryFnContext = createQueryFnContext()\n\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn,\n          queryFnContext,\n          this as unknown as Query,\n        )\n      }\n\n      return queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const createFetchContext = (): FetchContext<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey\n    > => {\n      const context: OmitKeyof<\n        FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n        'signal'\n      > = {\n        fetchOptions,\n        options: this.options,\n        queryKey: this.queryKey,\n        client: this.#client,\n        state: this.state,\n        fetchFn,\n      }\n\n      addSignalProperty(context)\n      return context as FetchContext<TQueryFnData, TError, TData, TQueryKey>\n    }\n\n    const context = createFetchContext()\n\n    this.options.behavior?.onFetch(context, this as unknown as Query)\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      // Schedule query gc after fetching\n      this.scheduleGc()\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise as\n        | Promise<TData>\n        | undefined,\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === undefined) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        try {\n          this.setData(data)\n        } catch (error) {\n          onError(error as TError)\n          return\n        }\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true,\n    })\n\n    return this.#retryer.start()\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null,\n          }\n        case 'success':\n          // If fetching ends successfully, we don't need revertState as a fallback anymore.\n          this.#revertState = undefined\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nexport function fetchState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  data: TData | undefined,\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? 'fetching' : 'paused',\n    ...(data === undefined &&\n      ({\n        error: null,\n        status: 'pending',\n      } as const)),\n  } as const\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = data !== undefined\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? (initialDataUpdatedAt ?? Date.now()) : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}