{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial, MathUtils, DataTexture, RedFormat, FloatType } from \"three\";\nimport { DigitalGlitch } from \"../shaders/DigitalGlitch.js\";\nclass GlitchPass extends Pass {\n  constructor(dt_size = 64) {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"goWild\");\n    __publicField(this, \"curF\");\n    __publicField(this, \"randX\");\n    __publicField(this, \"uniforms\");\n    this.uniforms = UniformsUtils.clone(DigitalGlitch.uniforms);\n    this.uniforms[\"tDisp\"].value = this.generateHeightmap(dt_size);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: DigitalGlitch.vertexShader,\n      fragmentShader: DigitalGlitch.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.goWild = false;\n    this.curF = 0;\n    this.generateTrigger();\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"seed\"].value = Math.random();\n    this.uniforms[\"byp\"].value = 0;\n    if (this.curF % this.randX == 0 || this.goWild == true) {\n      this.uniforms[\"amount\"].value = Math.random() / 30;\n      this.uniforms[\"angle\"].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms[\"seed_x\"].value = MathUtils.randFloat(-1, 1);\n      this.uniforms[\"seed_y\"].value = MathUtils.randFloat(-1, 1);\n      this.uniforms[\"distortion_x\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"distortion_y\"].value = MathUtils.randFloat(0, 1);\n      this.curF = 0;\n      this.generateTrigger();\n    } else if (this.curF % this.randX < this.randX / 5) {\n      this.uniforms[\"amount\"].value = Math.random() / 90;\n      this.uniforms[\"angle\"].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms[\"distortion_x\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"distortion_y\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"seed_x\"].value = MathUtils.randFloat(-0.3, 0.3);\n      this.uniforms[\"seed_y\"].value = MathUtils.randFloat(-0.3, 0.3);\n    } else if (this.goWild == false) {\n      this.uniforms[\"byp\"].value = 1;\n    }\n    this.curF++;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n  generateTrigger() {\n    this.randX = MathUtils.randInt(120, 240);\n  }\n  generateHeightmap(dt_size) {\n    const data_arr = new Float32Array(dt_size * dt_size);\n    const length = dt_size * dt_size;\n    for (let i = 0; i < length; i++) {\n      const val = MathUtils.randFloat(0, 1);\n      data_arr[i] = val;\n    }\n    const texture = new DataTexture(data_arr, dt_size, dt_size, RedFormat, FloatType);\n    texture.needsUpdate = true;\n    return texture;\n  }\n}\nexport { GlitchPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Pass","FullScreenQuad","UniformsUtils","ShaderMaterial","MathUtils","DataTexture","RedFormat","FloatType","DigitalGlitch","GlitchPass","constructor","dt_size","uniforms","clone","generateHeightmap","material","vertexShader","fragmentShader","fsQuad","goWild","curF","generateTrigger","render","renderer","writeBuffer","readBuffer","texture","Math","random","randX","randFloat","PI","renderToScreen","setRenderTarget","clear","randInt","data_arr","Float32Array","length","i","val","needsUpdate"],"sources":["C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/three-stdlib/postprocessing/GlitchPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial, MathUtils, DataTexture, RedFormat, FloatType } from \"three\";\nimport { DigitalGlitch } from \"../shaders/DigitalGlitch.js\";\nclass GlitchPass extends Pass {\n  constructor(dt_size = 64) {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"goWild\");\n    __publicField(this, \"curF\");\n    __publicField(this, \"randX\");\n    __publicField(this, \"uniforms\");\n    this.uniforms = UniformsUtils.clone(DigitalGlitch.uniforms);\n    this.uniforms[\"tDisp\"].value = this.generateHeightmap(dt_size);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: DigitalGlitch.vertexShader,\n      fragmentShader: DigitalGlitch.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.goWild = false;\n    this.curF = 0;\n    this.generateTrigger();\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"seed\"].value = Math.random();\n    this.uniforms[\"byp\"].value = 0;\n    if (this.curF % this.randX == 0 || this.goWild == true) {\n      this.uniforms[\"amount\"].value = Math.random() / 30;\n      this.uniforms[\"angle\"].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms[\"seed_x\"].value = MathUtils.randFloat(-1, 1);\n      this.uniforms[\"seed_y\"].value = MathUtils.randFloat(-1, 1);\n      this.uniforms[\"distortion_x\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"distortion_y\"].value = MathUtils.randFloat(0, 1);\n      this.curF = 0;\n      this.generateTrigger();\n    } else if (this.curF % this.randX < this.randX / 5) {\n      this.uniforms[\"amount\"].value = Math.random() / 90;\n      this.uniforms[\"angle\"].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms[\"distortion_x\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"distortion_y\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"seed_x\"].value = MathUtils.randFloat(-0.3, 0.3);\n      this.uniforms[\"seed_y\"].value = MathUtils.randFloat(-0.3, 0.3);\n    } else if (this.goWild == false) {\n      this.uniforms[\"byp\"].value = 1;\n    }\n    this.curF++;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear)\n        renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n  generateTrigger() {\n    this.randX = MathUtils.randInt(120, 240);\n  }\n  generateHeightmap(dt_size) {\n    const data_arr = new Float32Array(dt_size * dt_size);\n    const length = dt_size * dt_size;\n    for (let i = 0; i < length; i++) {\n      const val = MathUtils.randFloat(0, 1);\n      data_arr[i] = val;\n    }\n    const texture = new DataTexture(data_arr, dt_size, dt_size, RedFormat, FloatType);\n    texture.needsUpdate = true;\n    return texture;\n  }\n}\nexport {\n  GlitchPass\n};\n//# sourceMappingURL=GlitchPass.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}