{"ast":null,"code":"const FresnelShader = {\n  uniforms: {\n    mRefractionRatio: {\n      value: 1.02\n    },\n    mFresnelBias: {\n      value: 0.1\n    },\n    mFresnelPower: {\n      value: 2\n    },\n    mFresnelScale: {\n      value: 1\n    },\n    tCube: {\n      value: null\n    }\n  },\n  vertexShader: (/* glsl */\n  `\n    uniform float mRefractionRatio;\n    uniform float mFresnelBias;\n    uniform float mFresnelScale;\n    uniform float mFresnelPower;\n\n    varying vec3 vReflect;\n    varying vec3 vRefract[3];\n    varying float vReflectionFactor;\n\n    void main() {\n\n    \tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    \tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n    \tvec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\n\n    \tvec3 I = worldPosition.xyz - cameraPosition;\n\n    \tvReflect = reflect( I, worldNormal );\n    \tvRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\n    \tvRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\n    \tvRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\n    \tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\n\n    \tgl_Position = projectionMatrix * mvPosition;\n\n    }\n  `),\n  fragmentShader: (/* glsl */\n  `\n    uniform samplerCube tCube;\n\n    varying vec3 vReflect;\n    varying vec3 vRefract[3];\n    varying float vReflectionFactor;\n\n    void main() {\n\n    \tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n    \tvec4 refractedColor = vec4( 1.0 );\n\n    \trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\n    \trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\n    \trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\n\n    \tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\n\n    }\n  `)\n};\nexport { FresnelShader };","map":{"version":3,"names":["FresnelShader","uniforms","mRefractionRatio","value","mFresnelBias","mFresnelPower","mFresnelScale","tCube","vertexShader","fragmentShader"],"sources":["C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/three-stdlib/shaders/FresnelShader.js"],"sourcesContent":["const FresnelShader = {\n  uniforms: {\n    mRefractionRatio: { value: 1.02 },\n    mFresnelBias: { value: 0.1 },\n    mFresnelPower: { value: 2 },\n    mFresnelScale: { value: 1 },\n    tCube: { value: null }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n    uniform float mRefractionRatio;\n    uniform float mFresnelBias;\n    uniform float mFresnelScale;\n    uniform float mFresnelPower;\n\n    varying vec3 vReflect;\n    varying vec3 vRefract[3];\n    varying float vReflectionFactor;\n\n    void main() {\n\n    \tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    \tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n    \tvec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\n\n    \tvec3 I = worldPosition.xyz - cameraPosition;\n\n    \tvReflect = reflect( I, worldNormal );\n    \tvRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\n    \tvRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\n    \tvRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\n    \tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\n\n    \tgl_Position = projectionMatrix * mvPosition;\n\n    }\n  `\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n    uniform samplerCube tCube;\n\n    varying vec3 vReflect;\n    varying vec3 vRefract[3];\n    varying float vReflectionFactor;\n\n    void main() {\n\n    \tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n    \tvec4 refractedColor = vec4( 1.0 );\n\n    \trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\n    \trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\n    \trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\n\n    \tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\n\n    }\n  `\n  )\n};\nexport {\n  FresnelShader\n};\n//# sourceMappingURL=FresnelShader.js.map\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG;EACpBC,QAAQ,EAAE;IACRC,gBAAgB,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACjCC,YAAY,EAAE;MAAED,KAAK,EAAE;IAAI,CAAC;IAC5BE,aAAa,EAAE;MAAEF,KAAK,EAAE;IAAE,CAAC;IAC3BG,aAAa,EAAE;MAAEH,KAAK,EAAE;IAAE,CAAC;IAC3BI,KAAK,EAAE;MAAEJ,KAAK,EAAE;IAAK;EACvB,CAAC;EACDK,YAAY,GACV;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CACA;EACDC,cAAc,GACZ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AAEH,CAAC;AACD,SACET,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}