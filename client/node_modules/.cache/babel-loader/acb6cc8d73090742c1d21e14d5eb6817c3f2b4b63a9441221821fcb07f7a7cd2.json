{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, Vector2, WebGLRenderTarget, HalfFloatType, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SAOShader } from \"../shaders/SAOShader.js\";\nimport { DepthLimitedBlurShader, BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nconst SAOPass = /* @__PURE__ */(() => {\n  class SAOPass2 extends Pass {\n    constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n      super();\n      this.scene = scene;\n      this.camera = camera;\n      this.clear = true;\n      this.needsSwap = false;\n      this.supportsDepthTextureExtension = useDepthTexture;\n      this.supportsNormalTexture = useNormals;\n      this.originalClearColor = new Color();\n      this._oldClearColor = new Color();\n      this.oldClearAlpha = 1;\n      this.params = {\n        output: 0,\n        saoBias: 0.5,\n        saoIntensity: 0.18,\n        saoScale: 1,\n        saoKernelRadius: 100,\n        saoMinResolution: 0,\n        saoBlur: true,\n        saoBlurRadius: 8,\n        saoBlurStdDev: 4,\n        saoBlurDepthCutoff: 0.01\n      };\n      this.resolution = new Vector2(resolution.x, resolution.y);\n      this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n        type: HalfFloatType\n      });\n      this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n      this.beautyRenderTarget = this.saoRenderTarget.clone();\n      this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n        minFilter: NearestFilter,\n        magFilter: NearestFilter,\n        type: HalfFloatType\n      });\n      this.depthRenderTarget = this.normalRenderTarget.clone();\n      let depthTexture;\n      if (this.supportsDepthTextureExtension) {\n        depthTexture = new DepthTexture();\n        depthTexture.type = UnsignedShortType;\n        this.beautyRenderTarget.depthTexture = depthTexture;\n        this.beautyRenderTarget.depthBuffer = true;\n      }\n      this.depthMaterial = new MeshDepthMaterial();\n      this.depthMaterial.depthPacking = RGBADepthPacking;\n      this.depthMaterial.blending = NoBlending;\n      this.normalMaterial = new MeshNormalMaterial();\n      this.normalMaterial.blending = NoBlending;\n      this.saoMaterial = new ShaderMaterial({\n        defines: Object.assign({}, SAOShader.defines),\n        fragmentShader: SAOShader.fragmentShader,\n        vertexShader: SAOShader.vertexShader,\n        uniforms: UniformsUtils.clone(SAOShader.uniforms)\n      });\n      this.saoMaterial.extensions.derivatives = true;\n      this.saoMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n      this.saoMaterial.defines[\"NORMAL_TEXTURE\"] = this.supportsNormalTexture ? 1 : 0;\n      this.saoMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n      this.saoMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n      this.saoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n      this.saoMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n      this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n      this.saoMaterial.blending = NoBlending;\n      this.vBlurMaterial = new ShaderMaterial({\n        uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n        defines: Object.assign({}, DepthLimitedBlurShader.defines),\n        vertexShader: DepthLimitedBlurShader.vertexShader,\n        fragmentShader: DepthLimitedBlurShader.fragmentShader\n      });\n      this.vBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n      this.vBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n      this.vBlurMaterial.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n      this.vBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n      this.vBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n      this.vBlurMaterial.blending = NoBlending;\n      this.hBlurMaterial = new ShaderMaterial({\n        uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n        defines: Object.assign({}, DepthLimitedBlurShader.defines),\n        vertexShader: DepthLimitedBlurShader.vertexShader,\n        fragmentShader: DepthLimitedBlurShader.fragmentShader\n      });\n      this.hBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n      this.hBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n      this.hBlurMaterial.uniforms[\"tDiffuse\"].value = this.blurIntermediateRenderTarget.texture;\n      this.hBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n      this.hBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n      this.hBlurMaterial.blending = NoBlending;\n      this.materialCopy = new ShaderMaterial({\n        uniforms: UniformsUtils.clone(CopyShader.uniforms),\n        vertexShader: CopyShader.vertexShader,\n        fragmentShader: CopyShader.fragmentShader,\n        blending: NoBlending\n      });\n      this.materialCopy.transparent = true;\n      this.materialCopy.depthTest = false;\n      this.materialCopy.depthWrite = false;\n      this.materialCopy.blending = CustomBlending;\n      this.materialCopy.blendSrc = DstColorFactor;\n      this.materialCopy.blendDst = ZeroFactor;\n      this.materialCopy.blendEquation = AddEquation;\n      this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n      this.materialCopy.blendDstAlpha = ZeroFactor;\n      this.materialCopy.blendEquationAlpha = AddEquation;\n      this.depthCopy = new ShaderMaterial({\n        uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n        vertexShader: UnpackDepthRGBAShader.vertexShader,\n        fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n        blending: NoBlending\n      });\n      this.fsQuad = new FullScreenQuad(null);\n    }\n    render(renderer, writeBuffer, readBuffer) {\n      if (this.renderToScreen) {\n        this.materialCopy.blending = NoBlending;\n        this.materialCopy.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n        this.materialCopy.needsUpdate = true;\n        this.renderPass(renderer, this.materialCopy, null);\n      }\n      if (this.params.output === 1) {\n        return;\n      }\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      const oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      renderer.setRenderTarget(this.depthRenderTarget);\n      renderer.clear();\n      this.saoMaterial.uniforms[\"bias\"].value = this.params.saoBias;\n      this.saoMaterial.uniforms[\"intensity\"].value = this.params.saoIntensity;\n      this.saoMaterial.uniforms[\"scale\"].value = this.params.saoScale;\n      this.saoMaterial.uniforms[\"kernelRadius\"].value = this.params.saoKernelRadius;\n      this.saoMaterial.uniforms[\"minResolution\"].value = this.params.saoMinResolution;\n      this.saoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.saoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n      this.vBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n      this.hBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n      this.vBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.vBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.hBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.hBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n      if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n        BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n        BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n        this.prevStdDev = this.params.saoBlurStdDev;\n        this.prevNumSamples = this.params.saoBlurRadius;\n      }\n      renderer.setClearColor(0);\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      if (!this.supportsDepthTextureExtension) {\n        this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n      }\n      if (this.supportsNormalTexture) {\n        this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n      }\n      this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n      if (this.params.saoBlur) {\n        this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n        this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n      }\n      let outputMaterial = this.materialCopy;\n      if (this.params.output === 3) {\n        if (this.supportsDepthTextureExtension) {\n          this.materialCopy.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.depthTexture;\n          this.materialCopy.needsUpdate = true;\n        } else {\n          this.depthCopy.uniforms[\"tDiffuse\"].value = this.depthRenderTarget.texture;\n          this.depthCopy.needsUpdate = true;\n          outputMaterial = this.depthCopy;\n        }\n      } else if (this.params.output === 4) {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n        this.materialCopy.needsUpdate = true;\n      }\n      if (this.params.output === 0) {\n        outputMaterial.blending = CustomBlending;\n      } else {\n        outputMaterial.blending = NoBlending;\n      }\n      this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n    renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      const originalClearAlpha = renderer.getClearAlpha();\n      const originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n    renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      const originalClearAlpha = renderer.getClearAlpha();\n      const originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n    setSize(width, height) {\n      this.beautyRenderTarget.setSize(width, height);\n      this.saoRenderTarget.setSize(width, height);\n      this.blurIntermediateRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.depthRenderTarget.setSize(width, height);\n      this.saoMaterial.uniforms[\"size\"].value.set(width, height);\n      this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n      this.saoMaterial.needsUpdate = true;\n      this.vBlurMaterial.uniforms[\"size\"].value.set(width, height);\n      this.vBlurMaterial.needsUpdate = true;\n      this.hBlurMaterial.uniforms[\"size\"].value.set(width, height);\n      this.hBlurMaterial.needsUpdate = true;\n    }\n    dispose() {\n      this.saoRenderTarget.dispose();\n      this.blurIntermediateRenderTarget.dispose();\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.depthRenderTarget.dispose();\n      this.depthMaterial.dispose();\n      this.normalMaterial.dispose();\n      this.saoMaterial.dispose();\n      this.vBlurMaterial.dispose();\n      this.hBlurMaterial.dispose();\n      this.materialCopy.dispose();\n      this.depthCopy.dispose();\n      this.fsQuad.dispose();\n    }\n  }\n  __publicField(SAOPass2, \"OUTPUT\", {\n    Beauty: 1,\n    Default: 0,\n    SAO: 2,\n    Depth: 3,\n    Normal: 4\n  });\n  return SAOPass2;\n})();\nexport { SAOPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Color","Vector2","WebGLRenderTarget","HalfFloatType","NearestFilter","DepthTexture","UnsignedShortType","MeshDepthMaterial","RGBADepthPacking","NoBlending","MeshNormalMaterial","ShaderMaterial","UniformsUtils","CustomBlending","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Pass","FullScreenQuad","SAOShader","DepthLimitedBlurShader","BlurShaderUtils","CopyShader","UnpackDepthRGBAShader","SAOPass","SAOPass2","constructor","scene","camera","useDepthTexture","useNormals","resolution","clear","needsSwap","supportsDepthTextureExtension","supportsNormalTexture","originalClearColor","_oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","x","y","saoRenderTarget","type","blurIntermediateRenderTarget","clone","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","depthRenderTarget","depthTexture","depthBuffer","depthMaterial","depthPacking","blending","normalMaterial","saoMaterial","defines","assign","fragmentShader","vertexShader","uniforms","extensions","derivatives","isPerspectiveCamera","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthCopy","fsQuad","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","configure","setClearColor","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setClearAlpha","material","overrideMaterial","setSize","width","height","dispose","Beauty","Default","SAO","Depth","Normal"],"sources":["C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/three-stdlib/postprocessing/SAOPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, Vector2, WebGLRenderTarget, HalfFloatType, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SAOShader } from \"../shaders/SAOShader.js\";\nimport { DepthLimitedBlurShader, BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nconst SAOPass = /* @__PURE__ */ (() => {\n  class SAOPass2 extends Pass {\n    constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n      super();\n      this.scene = scene;\n      this.camera = camera;\n      this.clear = true;\n      this.needsSwap = false;\n      this.supportsDepthTextureExtension = useDepthTexture;\n      this.supportsNormalTexture = useNormals;\n      this.originalClearColor = new Color();\n      this._oldClearColor = new Color();\n      this.oldClearAlpha = 1;\n      this.params = {\n        output: 0,\n        saoBias: 0.5,\n        saoIntensity: 0.18,\n        saoScale: 1,\n        saoKernelRadius: 100,\n        saoMinResolution: 0,\n        saoBlur: true,\n        saoBlurRadius: 8,\n        saoBlurStdDev: 4,\n        saoBlurDepthCutoff: 0.01\n      };\n      this.resolution = new Vector2(resolution.x, resolution.y);\n      this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, { type: HalfFloatType });\n      this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n      this.beautyRenderTarget = this.saoRenderTarget.clone();\n      this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n        minFilter: NearestFilter,\n        magFilter: NearestFilter,\n        type: HalfFloatType\n      });\n      this.depthRenderTarget = this.normalRenderTarget.clone();\n      let depthTexture;\n      if (this.supportsDepthTextureExtension) {\n        depthTexture = new DepthTexture();\n        depthTexture.type = UnsignedShortType;\n        this.beautyRenderTarget.depthTexture = depthTexture;\n        this.beautyRenderTarget.depthBuffer = true;\n      }\n      this.depthMaterial = new MeshDepthMaterial();\n      this.depthMaterial.depthPacking = RGBADepthPacking;\n      this.depthMaterial.blending = NoBlending;\n      this.normalMaterial = new MeshNormalMaterial();\n      this.normalMaterial.blending = NoBlending;\n      this.saoMaterial = new ShaderMaterial({\n        defines: Object.assign({}, SAOShader.defines),\n        fragmentShader: SAOShader.fragmentShader,\n        vertexShader: SAOShader.vertexShader,\n        uniforms: UniformsUtils.clone(SAOShader.uniforms)\n      });\n      this.saoMaterial.extensions.derivatives = true;\n      this.saoMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n      this.saoMaterial.defines[\"NORMAL_TEXTURE\"] = this.supportsNormalTexture ? 1 : 0;\n      this.saoMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n      this.saoMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n      this.saoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n      this.saoMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n      this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n      this.saoMaterial.blending = NoBlending;\n      this.vBlurMaterial = new ShaderMaterial({\n        uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n        defines: Object.assign({}, DepthLimitedBlurShader.defines),\n        vertexShader: DepthLimitedBlurShader.vertexShader,\n        fragmentShader: DepthLimitedBlurShader.fragmentShader\n      });\n      this.vBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n      this.vBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n      this.vBlurMaterial.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n      this.vBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n      this.vBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n      this.vBlurMaterial.blending = NoBlending;\n      this.hBlurMaterial = new ShaderMaterial({\n        uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n        defines: Object.assign({}, DepthLimitedBlurShader.defines),\n        vertexShader: DepthLimitedBlurShader.vertexShader,\n        fragmentShader: DepthLimitedBlurShader.fragmentShader\n      });\n      this.hBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n      this.hBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n      this.hBlurMaterial.uniforms[\"tDiffuse\"].value = this.blurIntermediateRenderTarget.texture;\n      this.hBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n      this.hBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n      this.hBlurMaterial.blending = NoBlending;\n      this.materialCopy = new ShaderMaterial({\n        uniforms: UniformsUtils.clone(CopyShader.uniforms),\n        vertexShader: CopyShader.vertexShader,\n        fragmentShader: CopyShader.fragmentShader,\n        blending: NoBlending\n      });\n      this.materialCopy.transparent = true;\n      this.materialCopy.depthTest = false;\n      this.materialCopy.depthWrite = false;\n      this.materialCopy.blending = CustomBlending;\n      this.materialCopy.blendSrc = DstColorFactor;\n      this.materialCopy.blendDst = ZeroFactor;\n      this.materialCopy.blendEquation = AddEquation;\n      this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n      this.materialCopy.blendDstAlpha = ZeroFactor;\n      this.materialCopy.blendEquationAlpha = AddEquation;\n      this.depthCopy = new ShaderMaterial({\n        uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n        vertexShader: UnpackDepthRGBAShader.vertexShader,\n        fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n        blending: NoBlending\n      });\n      this.fsQuad = new FullScreenQuad(null);\n    }\n    render(renderer, writeBuffer, readBuffer) {\n      if (this.renderToScreen) {\n        this.materialCopy.blending = NoBlending;\n        this.materialCopy.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n        this.materialCopy.needsUpdate = true;\n        this.renderPass(renderer, this.materialCopy, null);\n      }\n      if (this.params.output === 1) {\n        return;\n      }\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      const oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      renderer.setRenderTarget(this.depthRenderTarget);\n      renderer.clear();\n      this.saoMaterial.uniforms[\"bias\"].value = this.params.saoBias;\n      this.saoMaterial.uniforms[\"intensity\"].value = this.params.saoIntensity;\n      this.saoMaterial.uniforms[\"scale\"].value = this.params.saoScale;\n      this.saoMaterial.uniforms[\"kernelRadius\"].value = this.params.saoKernelRadius;\n      this.saoMaterial.uniforms[\"minResolution\"].value = this.params.saoMinResolution;\n      this.saoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.saoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n      this.vBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n      this.hBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n      this.vBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.vBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.hBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.hBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n      if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n        BlurShaderUtils.configure(\n          this.vBlurMaterial,\n          this.params.saoBlurRadius,\n          this.params.saoBlurStdDev,\n          new Vector2(0, 1)\n        );\n        BlurShaderUtils.configure(\n          this.hBlurMaterial,\n          this.params.saoBlurRadius,\n          this.params.saoBlurStdDev,\n          new Vector2(1, 0)\n        );\n        this.prevStdDev = this.params.saoBlurStdDev;\n        this.prevNumSamples = this.params.saoBlurRadius;\n      }\n      renderer.setClearColor(0);\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      if (!this.supportsDepthTextureExtension) {\n        this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n      }\n      if (this.supportsNormalTexture) {\n        this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n      }\n      this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n      if (this.params.saoBlur) {\n        this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n        this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n      }\n      let outputMaterial = this.materialCopy;\n      if (this.params.output === 3) {\n        if (this.supportsDepthTextureExtension) {\n          this.materialCopy.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.depthTexture;\n          this.materialCopy.needsUpdate = true;\n        } else {\n          this.depthCopy.uniforms[\"tDiffuse\"].value = this.depthRenderTarget.texture;\n          this.depthCopy.needsUpdate = true;\n          outputMaterial = this.depthCopy;\n        }\n      } else if (this.params.output === 4) {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n        this.materialCopy.needsUpdate = true;\n      }\n      if (this.params.output === 0) {\n        outputMaterial.blending = CustomBlending;\n      } else {\n        outputMaterial.blending = NoBlending;\n      }\n      this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n    renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      const originalClearAlpha = renderer.getClearAlpha();\n      const originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n    renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      const originalClearAlpha = renderer.getClearAlpha();\n      const originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n    setSize(width, height) {\n      this.beautyRenderTarget.setSize(width, height);\n      this.saoRenderTarget.setSize(width, height);\n      this.blurIntermediateRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.depthRenderTarget.setSize(width, height);\n      this.saoMaterial.uniforms[\"size\"].value.set(width, height);\n      this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n      this.saoMaterial.needsUpdate = true;\n      this.vBlurMaterial.uniforms[\"size\"].value.set(width, height);\n      this.vBlurMaterial.needsUpdate = true;\n      this.hBlurMaterial.uniforms[\"size\"].value.set(width, height);\n      this.hBlurMaterial.needsUpdate = true;\n    }\n    dispose() {\n      this.saoRenderTarget.dispose();\n      this.blurIntermediateRenderTarget.dispose();\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.depthRenderTarget.dispose();\n      this.depthMaterial.dispose();\n      this.normalMaterial.dispose();\n      this.saoMaterial.dispose();\n      this.vBlurMaterial.dispose();\n      this.hBlurMaterial.dispose();\n      this.materialCopy.dispose();\n      this.depthCopy.dispose();\n      this.fsQuad.dispose();\n    }\n  }\n  __publicField(SAOPass2, \"OUTPUT\", {\n    Beauty: 1,\n    Default: 0,\n    SAO: 2,\n    Depth: 3,\n    Normal: 4\n  });\n  return SAOPass2;\n})();\nexport {\n  SAOPass\n};\n//# sourceMappingURL=SAOPass.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}