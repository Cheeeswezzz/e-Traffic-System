{"ast":null,"code":"import { Loader, HalfFloatType, CubeTexture, LinearFilter, FloatType, FileLoader, DataTexture } from \"three\";\nimport { RGBELoader } from \"./RGBELoader.js\";\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n  load(urls, onLoad, onProgress, onError) {\n    if (typeof urls === \"string\") {\n      urls = [urls];\n    } else if (!Array.isArray(urls)) {\n      console.warn(\"THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.\");\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n    const texture = new CubeTexture();\n    texture.type = this.type;\n    switch (texture.type) {\n      case FloatType:\n      case HalfFloatType:\n        if (\"colorSpace\" in texture) texture.colorSpace = \"srgb-linear\";else texture.encoding = 3e3;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n    const scope = this;\n    let loaded = 0;\n    function loadHDRData(i, onLoad2, onProgress2, onError2) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType(\"arraybuffer\").setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n        if (texData.data !== void 0) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          if (\"colorSpace\" in dataTexture) dataTexture.colorSpace = texture.SRGBColorSpace;else dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad2) onLoad2(texture);\n        }\n      }, onProgress2, onError2);\n    }\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n    return texture;\n  }\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n}\nexport { HDRCubeTextureLoader };","map":{"version":3,"names":["Loader","HalfFloatType","CubeTexture","LinearFilter","FloatType","FileLoader","DataTexture","RGBELoader","HDRCubeTextureLoader","constructor","manager","hdrLoader","type","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","colorSpace","encoding","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","onLoad2","onProgress2","onError2","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","texData","parse","data","dataTexture","width","height","SRGBColorSpace","format","images","needsUpdate","length","value"],"sources":["C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/three-stdlib/loaders/HDRCubeTextureLoader.js"],"sourcesContent":["import { Loader, HalfFloatType, CubeTexture, LinearFilter, FloatType, FileLoader, DataTexture } from \"three\";\nimport { RGBELoader } from \"./RGBELoader.js\";\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n  load(urls, onLoad, onProgress, onError) {\n    if (typeof urls === \"string\") {\n      urls = [urls];\n    } else if (!Array.isArray(urls)) {\n      console.warn(\"THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.\");\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n    const texture = new CubeTexture();\n    texture.type = this.type;\n    switch (texture.type) {\n      case FloatType:\n      case HalfFloatType:\n        if (\"colorSpace\" in texture)\n          texture.colorSpace = \"srgb-linear\";\n        else\n          texture.encoding = 3e3;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n    const scope = this;\n    let loaded = 0;\n    function loadHDRData(i, onLoad2, onProgress2, onError2) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType(\"arraybuffer\").setWithCredentials(scope.withCredentials).load(\n        urls[i],\n        function(buffer) {\n          loaded++;\n          const texData = scope.hdrLoader.parse(buffer);\n          if (!texData)\n            return;\n          if (texData.data !== void 0) {\n            const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n            dataTexture.type = texture.type;\n            if (\"colorSpace\" in dataTexture)\n              dataTexture.colorSpace = texture.SRGBColorSpace;\n            else\n              dataTexture.encoding = texture.encoding;\n            dataTexture.format = texture.format;\n            dataTexture.minFilter = texture.minFilter;\n            dataTexture.magFilter = texture.magFilter;\n            dataTexture.generateMipmaps = texture.generateMipmaps;\n            texture.images[i] = dataTexture;\n          }\n          if (loaded === 6) {\n            texture.needsUpdate = true;\n            if (onLoad2)\n              onLoad2(texture);\n          }\n        },\n        onProgress2,\n        onError2\n      );\n    }\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n    return texture;\n  }\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n}\nexport {\n  HDRCubeTextureLoader\n};\n//# sourceMappingURL=HDRCubeTextureLoader.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}