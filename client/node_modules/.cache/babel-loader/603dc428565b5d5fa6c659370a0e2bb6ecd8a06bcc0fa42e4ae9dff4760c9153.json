{"ast":null,"code":"import { Line3, Plane, Vector3, Mesh } from \"three\";\nimport { ConvexGeometry } from \"../geometries/ConvexGeometry.js\";\nconst _v1 = /* @__PURE__ */new Vector3();\nconst ConvexObjectBreaker = /* @__PURE__ */(() => {\n  class ConvexObjectBreaker2 {\n    constructor(minSizeForBreak = 1.4, smallDelta = 1e-4) {\n      this.minSizeForBreak = minSizeForBreak;\n      this.smallDelta = smallDelta;\n      this.tempLine1 = new Line3();\n      this.tempPlane1 = new Plane();\n      this.tempPlane2 = new Plane();\n      this.tempPlane_Cut = new Plane();\n      this.tempCM1 = new Vector3();\n      this.tempCM2 = new Vector3();\n      this.tempVector3 = new Vector3();\n      this.tempVector3_2 = new Vector3();\n      this.tempVector3_3 = new Vector3();\n      this.tempVector3_P0 = new Vector3();\n      this.tempVector3_P1 = new Vector3();\n      this.tempVector3_P2 = new Vector3();\n      this.tempVector3_N0 = new Vector3();\n      this.tempVector3_N1 = new Vector3();\n      this.tempVector3_AB = new Vector3();\n      this.tempVector3_CB = new Vector3();\n      this.tempResultObjects = {\n        object1: null,\n        object2: null\n      };\n      this.segments = [];\n      const n = 30 * 30;\n      for (let i = 0; i < n; i++) this.segments[i] = false;\n    }\n    prepareBreakableObject(object, mass, velocity, angularVelocity, breakable) {\n      const userData = object.userData;\n      userData.mass = mass;\n      userData.velocity = velocity.clone();\n      userData.angularVelocity = angularVelocity.clone();\n      userData.breakable = breakable;\n    }\n    /*\n     * @param {int} maxRadialIterations Iterations for radial cuts.\n     * @param {int} maxRandomIterations Max random iterations for not-radial cuts\n     *\n     * Returns the array of pieces\n     */\n    subdivideByImpact(object, pointOfImpact, normal, maxRadialIterations, maxRandomIterations) {\n      const debris = [];\n      const tempPlane1 = this.tempPlane1;\n      const tempPlane2 = this.tempPlane2;\n      this.tempVector3.addVectors(pointOfImpact, normal);\n      tempPlane1.setFromCoplanarPoints(pointOfImpact, object.position, this.tempVector3);\n      const maxTotalIterations = maxRandomIterations + maxRadialIterations;\n      const scope = this;\n      function subdivideRadial(subObject, startAngle, endAngle, numIterations) {\n        if (Math.random() < numIterations * 0.05 || numIterations > maxTotalIterations) {\n          debris.push(subObject);\n          return;\n        }\n        let angle = Math.PI;\n        if (numIterations === 0) {\n          tempPlane2.normal.copy(tempPlane1.normal);\n          tempPlane2.constant = tempPlane1.constant;\n        } else {\n          if (numIterations <= maxRadialIterations) {\n            angle = (endAngle - startAngle) * (0.2 + 0.6 * Math.random()) + startAngle;\n            scope.tempVector3_2.copy(object.position).sub(pointOfImpact).applyAxisAngle(normal, angle).add(pointOfImpact);\n            tempPlane2.setFromCoplanarPoints(pointOfImpact, scope.tempVector3, scope.tempVector3_2);\n          } else {\n            angle = (0.5 * (numIterations & 1) + 0.2 * (2 - Math.random())) * Math.PI;\n            scope.tempVector3_2.copy(pointOfImpact).sub(subObject.position).applyAxisAngle(normal, angle).add(subObject.position);\n            scope.tempVector3_3.copy(normal).add(subObject.position);\n            tempPlane2.setFromCoplanarPoints(subObject.position, scope.tempVector3_3, scope.tempVector3_2);\n          }\n        }\n        scope.cutByPlane(subObject, tempPlane2, scope.tempResultObjects);\n        const obj1 = scope.tempResultObjects.object1;\n        const obj2 = scope.tempResultObjects.object2;\n        if (obj1) {\n          subdivideRadial(obj1, startAngle, angle, numIterations + 1);\n        }\n        if (obj2) {\n          subdivideRadial(obj2, angle, endAngle, numIterations + 1);\n        }\n      }\n      subdivideRadial(object, 0, 2 * Math.PI, 0);\n      return debris;\n    }\n    cutByPlane(object, plane, output) {\n      const geometry = object.geometry;\n      const coords = geometry.attributes.position.array;\n      const normals = geometry.attributes.normal.array;\n      const numPoints = coords.length / 3;\n      let numFaces = numPoints / 3;\n      let indices = geometry.getIndex();\n      if (indices) {\n        indices = indices.array;\n        numFaces = indices.length / 3;\n      }\n      function getVertexIndex(faceIdx, vert) {\n        const idx = faceIdx * 3 + vert;\n        return indices ? indices[idx] : idx;\n      }\n      const points1 = [];\n      const points2 = [];\n      const delta = this.smallDelta;\n      const numPointPairs = numPoints * numPoints;\n      for (let i = 0; i < numPointPairs; i++) this.segments[i] = false;\n      const p0 = this.tempVector3_P0;\n      const p1 = this.tempVector3_P1;\n      const n0 = this.tempVector3_N0;\n      const n1 = this.tempVector3_N1;\n      for (let i = 0; i < numFaces - 1; i++) {\n        const a1 = getVertexIndex(i, 0);\n        const b1 = getVertexIndex(i, 1);\n        const c1 = getVertexIndex(i, 2);\n        n0.set(normals[a1], normals[a1] + 1, normals[a1] + 2);\n        for (let j = i + 1; j < numFaces; j++) {\n          const a2 = getVertexIndex(j, 0);\n          const b2 = getVertexIndex(j, 1);\n          const c2 = getVertexIndex(j, 2);\n          n1.set(normals[a2], normals[a2] + 1, normals[a2] + 2);\n          const coplanar = 1 - n0.dot(n1) < delta;\n          if (coplanar) {\n            if (a1 === a2 || a1 === b2 || a1 === c2) {\n              if (b1 === a2 || b1 === b2 || b1 === c2) {\n                this.segments[a1 * numPoints + b1] = true;\n                this.segments[b1 * numPoints + a1] = true;\n              } else {\n                this.segments[c1 * numPoints + a1] = true;\n                this.segments[a1 * numPoints + c1] = true;\n              }\n            } else if (b1 === a2 || b1 === b2 || b1 === c2) {\n              this.segments[c1 * numPoints + b1] = true;\n              this.segments[b1 * numPoints + c1] = true;\n            }\n          }\n        }\n      }\n      const localPlane = this.tempPlane_Cut;\n      object.updateMatrix();\n      ConvexObjectBreaker2.transformPlaneToLocalSpace(plane, object.matrix, localPlane);\n      for (let i = 0; i < numFaces; i++) {\n        const va = getVertexIndex(i, 0);\n        const vb = getVertexIndex(i, 1);\n        const vc = getVertexIndex(i, 2);\n        for (let segment = 0; segment < 3; segment++) {\n          const i0 = segment === 0 ? va : segment === 1 ? vb : vc;\n          const i1 = segment === 0 ? vb : segment === 1 ? vc : va;\n          const segmentState = this.segments[i0 * numPoints + i1];\n          if (segmentState) continue;\n          this.segments[i0 * numPoints + i1] = true;\n          this.segments[i1 * numPoints + i0] = true;\n          p0.set(coords[3 * i0], coords[3 * i0 + 1], coords[3 * i0 + 2]);\n          p1.set(coords[3 * i1], coords[3 * i1 + 1], coords[3 * i1 + 2]);\n          let mark0 = 0;\n          let d = localPlane.distanceToPoint(p0);\n          if (d > delta) {\n            mark0 = 2;\n            points2.push(p0.clone());\n          } else if (d < -delta) {\n            mark0 = 1;\n            points1.push(p0.clone());\n          } else {\n            mark0 = 3;\n            points1.push(p0.clone());\n            points2.push(p0.clone());\n          }\n          let mark1 = 0;\n          d = localPlane.distanceToPoint(p1);\n          if (d > delta) {\n            mark1 = 2;\n            points2.push(p1.clone());\n          } else if (d < -delta) {\n            mark1 = 1;\n            points1.push(p1.clone());\n          } else {\n            mark1 = 3;\n            points1.push(p1.clone());\n            points2.push(p1.clone());\n          }\n          if (mark0 === 1 && mark1 === 2 || mark0 === 2 && mark1 === 1) {\n            this.tempLine1.start.copy(p0);\n            this.tempLine1.end.copy(p1);\n            let intersection = new Vector3();\n            intersection = localPlane.intersectLine(this.tempLine1, intersection);\n            if (intersection === null) {\n              console.error(\"Internal error: segment does not intersect plane.\");\n              output.segmentedObject1 = null;\n              output.segmentedObject2 = null;\n              return 0;\n            }\n            points1.push(intersection);\n            points2.push(intersection.clone());\n          }\n        }\n      }\n      const newMass = object.userData.mass * 0.5;\n      this.tempCM1.set(0, 0, 0);\n      let radius1 = 0;\n      const numPoints1 = points1.length;\n      if (numPoints1 > 0) {\n        for (let i = 0; i < numPoints1; i++) this.tempCM1.add(points1[i]);\n        this.tempCM1.divideScalar(numPoints1);\n        for (let i = 0; i < numPoints1; i++) {\n          const p = points1[i];\n          p.sub(this.tempCM1);\n          radius1 = Math.max(radius1, p.x, p.y, p.z);\n        }\n        this.tempCM1.add(object.position);\n      }\n      this.tempCM2.set(0, 0, 0);\n      let radius2 = 0;\n      const numPoints2 = points2.length;\n      if (numPoints2 > 0) {\n        for (let i = 0; i < numPoints2; i++) this.tempCM2.add(points2[i]);\n        this.tempCM2.divideScalar(numPoints2);\n        for (let i = 0; i < numPoints2; i++) {\n          const p = points2[i];\n          p.sub(this.tempCM2);\n          radius2 = Math.max(radius2, p.x, p.y, p.z);\n        }\n        this.tempCM2.add(object.position);\n      }\n      let object1 = null;\n      let object2 = null;\n      let numObjects = 0;\n      if (numPoints1 > 4) {\n        object1 = new Mesh(new ConvexGeometry(points1), object.material);\n        object1.position.copy(this.tempCM1);\n        object1.quaternion.copy(object.quaternion);\n        this.prepareBreakableObject(object1, newMass, object.userData.velocity, object.userData.angularVelocity, 2 * radius1 > this.minSizeForBreak);\n        numObjects++;\n      }\n      if (numPoints2 > 4) {\n        object2 = new Mesh(new ConvexGeometry(points2), object.material);\n        object2.position.copy(this.tempCM2);\n        object2.quaternion.copy(object.quaternion);\n        this.prepareBreakableObject(object2, newMass, object.userData.velocity, object.userData.angularVelocity, 2 * radius2 > this.minSizeForBreak);\n        numObjects++;\n      }\n      output.object1 = object1;\n      output.object2 = object2;\n      return numObjects;\n    }\n    static transformFreeVector(v, m) {\n      const x = v.x,\n        y = v.y,\n        z = v.z;\n      const e = m.elements;\n      v.x = e[0] * x + e[4] * y + e[8] * z;\n      v.y = e[1] * x + e[5] * y + e[9] * z;\n      v.z = e[2] * x + e[6] * y + e[10] * z;\n      return v;\n    }\n    static transformFreeVectorInverse(v, m) {\n      const x = v.x,\n        y = v.y,\n        z = v.z;\n      const e = m.elements;\n      v.x = e[0] * x + e[1] * y + e[2] * z;\n      v.y = e[4] * x + e[5] * y + e[6] * z;\n      v.z = e[8] * x + e[9] * y + e[10] * z;\n      return v;\n    }\n    static transformTiedVectorInverse(v, m) {\n      const x = v.x,\n        y = v.y,\n        z = v.z;\n      const e = m.elements;\n      v.x = e[0] * x + e[1] * y + e[2] * z - e[12];\n      v.y = e[4] * x + e[5] * y + e[6] * z - e[13];\n      v.z = e[8] * x + e[9] * y + e[10] * z - e[14];\n      return v;\n    }\n    static transformPlaneToLocalSpace(plane, m, resultPlane) {\n      resultPlane.normal.copy(plane.normal);\n      resultPlane.constant = plane.constant;\n      const referencePoint = ConvexObjectBreaker2.transformTiedVectorInverse(plane.coplanarPoint(_v1), m);\n      ConvexObjectBreaker2.transformFreeVectorInverse(resultPlane.normal, m);\n      resultPlane.constant = -referencePoint.dot(resultPlane.normal);\n    }\n  }\n  return ConvexObjectBreaker2;\n})();\nexport { ConvexObjectBreaker };","map":{"version":3,"names":["Line3","Plane","Vector3","Mesh","ConvexGeometry","_v1","ConvexObjectBreaker","ConvexObjectBreaker2","constructor","minSizeForBreak","smallDelta","tempLine1","tempPlane1","tempPlane2","tempPlane_Cut","tempCM1","tempCM2","tempVector3","tempVector3_2","tempVector3_3","tempVector3_P0","tempVector3_P1","tempVector3_P2","tempVector3_N0","tempVector3_N1","tempVector3_AB","tempVector3_CB","tempResultObjects","object1","object2","segments","n","i","prepareBreakableObject","object","mass","velocity","angularVelocity","breakable","userData","clone","subdivideByImpact","pointOfImpact","normal","maxRadialIterations","maxRandomIterations","debris","addVectors","setFromCoplanarPoints","position","maxTotalIterations","scope","subdivideRadial","subObject","startAngle","endAngle","numIterations","Math","random","push","angle","PI","copy","constant","sub","applyAxisAngle","add","cutByPlane","obj1","obj2","plane","output","geometry","coords","attributes","array","normals","numPoints","length","numFaces","indices","getIndex","getVertexIndex","faceIdx","vert","idx","points1","points2","delta","numPointPairs","p0","p1","n0","n1","a1","b1","c1","set","j","a2","b2","c2","coplanar","dot","localPlane","updateMatrix","transformPlaneToLocalSpace","matrix","va","vb","vc","segment","i0","i1","segmentState","mark0","d","distanceToPoint","mark1","start","end","intersection","intersectLine","console","error","segmentedObject1","segmentedObject2","newMass","radius1","numPoints1","divideScalar","p","max","x","y","z","radius2","numPoints2","numObjects","material","quaternion","transformFreeVector","v","m","e","elements","transformFreeVectorInverse","transformTiedVectorInverse","resultPlane","referencePoint","coplanarPoint"],"sources":["C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/three-stdlib/misc/ConvexObjectBreaker.js"],"sourcesContent":["import { Line3, Plane, Vector3, Mesh } from \"three\";\nimport { ConvexGeometry } from \"../geometries/ConvexGeometry.js\";\nconst _v1 = /* @__PURE__ */ new Vector3();\nconst ConvexObjectBreaker = /* @__PURE__ */ (() => {\n  class ConvexObjectBreaker2 {\n    constructor(minSizeForBreak = 1.4, smallDelta = 1e-4) {\n      this.minSizeForBreak = minSizeForBreak;\n      this.smallDelta = smallDelta;\n      this.tempLine1 = new Line3();\n      this.tempPlane1 = new Plane();\n      this.tempPlane2 = new Plane();\n      this.tempPlane_Cut = new Plane();\n      this.tempCM1 = new Vector3();\n      this.tempCM2 = new Vector3();\n      this.tempVector3 = new Vector3();\n      this.tempVector3_2 = new Vector3();\n      this.tempVector3_3 = new Vector3();\n      this.tempVector3_P0 = new Vector3();\n      this.tempVector3_P1 = new Vector3();\n      this.tempVector3_P2 = new Vector3();\n      this.tempVector3_N0 = new Vector3();\n      this.tempVector3_N1 = new Vector3();\n      this.tempVector3_AB = new Vector3();\n      this.tempVector3_CB = new Vector3();\n      this.tempResultObjects = { object1: null, object2: null };\n      this.segments = [];\n      const n = 30 * 30;\n      for (let i = 0; i < n; i++)\n        this.segments[i] = false;\n    }\n    prepareBreakableObject(object, mass, velocity, angularVelocity, breakable) {\n      const userData = object.userData;\n      userData.mass = mass;\n      userData.velocity = velocity.clone();\n      userData.angularVelocity = angularVelocity.clone();\n      userData.breakable = breakable;\n    }\n    /*\n     * @param {int} maxRadialIterations Iterations for radial cuts.\n     * @param {int} maxRandomIterations Max random iterations for not-radial cuts\n     *\n     * Returns the array of pieces\n     */\n    subdivideByImpact(object, pointOfImpact, normal, maxRadialIterations, maxRandomIterations) {\n      const debris = [];\n      const tempPlane1 = this.tempPlane1;\n      const tempPlane2 = this.tempPlane2;\n      this.tempVector3.addVectors(pointOfImpact, normal);\n      tempPlane1.setFromCoplanarPoints(pointOfImpact, object.position, this.tempVector3);\n      const maxTotalIterations = maxRandomIterations + maxRadialIterations;\n      const scope = this;\n      function subdivideRadial(subObject, startAngle, endAngle, numIterations) {\n        if (Math.random() < numIterations * 0.05 || numIterations > maxTotalIterations) {\n          debris.push(subObject);\n          return;\n        }\n        let angle = Math.PI;\n        if (numIterations === 0) {\n          tempPlane2.normal.copy(tempPlane1.normal);\n          tempPlane2.constant = tempPlane1.constant;\n        } else {\n          if (numIterations <= maxRadialIterations) {\n            angle = (endAngle - startAngle) * (0.2 + 0.6 * Math.random()) + startAngle;\n            scope.tempVector3_2.copy(object.position).sub(pointOfImpact).applyAxisAngle(normal, angle).add(pointOfImpact);\n            tempPlane2.setFromCoplanarPoints(pointOfImpact, scope.tempVector3, scope.tempVector3_2);\n          } else {\n            angle = (0.5 * (numIterations & 1) + 0.2 * (2 - Math.random())) * Math.PI;\n            scope.tempVector3_2.copy(pointOfImpact).sub(subObject.position).applyAxisAngle(normal, angle).add(subObject.position);\n            scope.tempVector3_3.copy(normal).add(subObject.position);\n            tempPlane2.setFromCoplanarPoints(subObject.position, scope.tempVector3_3, scope.tempVector3_2);\n          }\n        }\n        scope.cutByPlane(subObject, tempPlane2, scope.tempResultObjects);\n        const obj1 = scope.tempResultObjects.object1;\n        const obj2 = scope.tempResultObjects.object2;\n        if (obj1) {\n          subdivideRadial(obj1, startAngle, angle, numIterations + 1);\n        }\n        if (obj2) {\n          subdivideRadial(obj2, angle, endAngle, numIterations + 1);\n        }\n      }\n      subdivideRadial(object, 0, 2 * Math.PI, 0);\n      return debris;\n    }\n    cutByPlane(object, plane, output) {\n      const geometry = object.geometry;\n      const coords = geometry.attributes.position.array;\n      const normals = geometry.attributes.normal.array;\n      const numPoints = coords.length / 3;\n      let numFaces = numPoints / 3;\n      let indices = geometry.getIndex();\n      if (indices) {\n        indices = indices.array;\n        numFaces = indices.length / 3;\n      }\n      function getVertexIndex(faceIdx, vert) {\n        const idx = faceIdx * 3 + vert;\n        return indices ? indices[idx] : idx;\n      }\n      const points1 = [];\n      const points2 = [];\n      const delta = this.smallDelta;\n      const numPointPairs = numPoints * numPoints;\n      for (let i = 0; i < numPointPairs; i++)\n        this.segments[i] = false;\n      const p0 = this.tempVector3_P0;\n      const p1 = this.tempVector3_P1;\n      const n0 = this.tempVector3_N0;\n      const n1 = this.tempVector3_N1;\n      for (let i = 0; i < numFaces - 1; i++) {\n        const a1 = getVertexIndex(i, 0);\n        const b1 = getVertexIndex(i, 1);\n        const c1 = getVertexIndex(i, 2);\n        n0.set(normals[a1], normals[a1] + 1, normals[a1] + 2);\n        for (let j = i + 1; j < numFaces; j++) {\n          const a2 = getVertexIndex(j, 0);\n          const b2 = getVertexIndex(j, 1);\n          const c2 = getVertexIndex(j, 2);\n          n1.set(normals[a2], normals[a2] + 1, normals[a2] + 2);\n          const coplanar = 1 - n0.dot(n1) < delta;\n          if (coplanar) {\n            if (a1 === a2 || a1 === b2 || a1 === c2) {\n              if (b1 === a2 || b1 === b2 || b1 === c2) {\n                this.segments[a1 * numPoints + b1] = true;\n                this.segments[b1 * numPoints + a1] = true;\n              } else {\n                this.segments[c1 * numPoints + a1] = true;\n                this.segments[a1 * numPoints + c1] = true;\n              }\n            } else if (b1 === a2 || b1 === b2 || b1 === c2) {\n              this.segments[c1 * numPoints + b1] = true;\n              this.segments[b1 * numPoints + c1] = true;\n            }\n          }\n        }\n      }\n      const localPlane = this.tempPlane_Cut;\n      object.updateMatrix();\n      ConvexObjectBreaker2.transformPlaneToLocalSpace(plane, object.matrix, localPlane);\n      for (let i = 0; i < numFaces; i++) {\n        const va = getVertexIndex(i, 0);\n        const vb = getVertexIndex(i, 1);\n        const vc = getVertexIndex(i, 2);\n        for (let segment = 0; segment < 3; segment++) {\n          const i0 = segment === 0 ? va : segment === 1 ? vb : vc;\n          const i1 = segment === 0 ? vb : segment === 1 ? vc : va;\n          const segmentState = this.segments[i0 * numPoints + i1];\n          if (segmentState)\n            continue;\n          this.segments[i0 * numPoints + i1] = true;\n          this.segments[i1 * numPoints + i0] = true;\n          p0.set(coords[3 * i0], coords[3 * i0 + 1], coords[3 * i0 + 2]);\n          p1.set(coords[3 * i1], coords[3 * i1 + 1], coords[3 * i1 + 2]);\n          let mark0 = 0;\n          let d = localPlane.distanceToPoint(p0);\n          if (d > delta) {\n            mark0 = 2;\n            points2.push(p0.clone());\n          } else if (d < -delta) {\n            mark0 = 1;\n            points1.push(p0.clone());\n          } else {\n            mark0 = 3;\n            points1.push(p0.clone());\n            points2.push(p0.clone());\n          }\n          let mark1 = 0;\n          d = localPlane.distanceToPoint(p1);\n          if (d > delta) {\n            mark1 = 2;\n            points2.push(p1.clone());\n          } else if (d < -delta) {\n            mark1 = 1;\n            points1.push(p1.clone());\n          } else {\n            mark1 = 3;\n            points1.push(p1.clone());\n            points2.push(p1.clone());\n          }\n          if (mark0 === 1 && mark1 === 2 || mark0 === 2 && mark1 === 1) {\n            this.tempLine1.start.copy(p0);\n            this.tempLine1.end.copy(p1);\n            let intersection = new Vector3();\n            intersection = localPlane.intersectLine(this.tempLine1, intersection);\n            if (intersection === null) {\n              console.error(\"Internal error: segment does not intersect plane.\");\n              output.segmentedObject1 = null;\n              output.segmentedObject2 = null;\n              return 0;\n            }\n            points1.push(intersection);\n            points2.push(intersection.clone());\n          }\n        }\n      }\n      const newMass = object.userData.mass * 0.5;\n      this.tempCM1.set(0, 0, 0);\n      let radius1 = 0;\n      const numPoints1 = points1.length;\n      if (numPoints1 > 0) {\n        for (let i = 0; i < numPoints1; i++)\n          this.tempCM1.add(points1[i]);\n        this.tempCM1.divideScalar(numPoints1);\n        for (let i = 0; i < numPoints1; i++) {\n          const p = points1[i];\n          p.sub(this.tempCM1);\n          radius1 = Math.max(radius1, p.x, p.y, p.z);\n        }\n        this.tempCM1.add(object.position);\n      }\n      this.tempCM2.set(0, 0, 0);\n      let radius2 = 0;\n      const numPoints2 = points2.length;\n      if (numPoints2 > 0) {\n        for (let i = 0; i < numPoints2; i++)\n          this.tempCM2.add(points2[i]);\n        this.tempCM2.divideScalar(numPoints2);\n        for (let i = 0; i < numPoints2; i++) {\n          const p = points2[i];\n          p.sub(this.tempCM2);\n          radius2 = Math.max(radius2, p.x, p.y, p.z);\n        }\n        this.tempCM2.add(object.position);\n      }\n      let object1 = null;\n      let object2 = null;\n      let numObjects = 0;\n      if (numPoints1 > 4) {\n        object1 = new Mesh(new ConvexGeometry(points1), object.material);\n        object1.position.copy(this.tempCM1);\n        object1.quaternion.copy(object.quaternion);\n        this.prepareBreakableObject(\n          object1,\n          newMass,\n          object.userData.velocity,\n          object.userData.angularVelocity,\n          2 * radius1 > this.minSizeForBreak\n        );\n        numObjects++;\n      }\n      if (numPoints2 > 4) {\n        object2 = new Mesh(new ConvexGeometry(points2), object.material);\n        object2.position.copy(this.tempCM2);\n        object2.quaternion.copy(object.quaternion);\n        this.prepareBreakableObject(\n          object2,\n          newMass,\n          object.userData.velocity,\n          object.userData.angularVelocity,\n          2 * radius2 > this.minSizeForBreak\n        );\n        numObjects++;\n      }\n      output.object1 = object1;\n      output.object2 = object2;\n      return numObjects;\n    }\n    static transformFreeVector(v, m) {\n      const x = v.x, y = v.y, z = v.z;\n      const e = m.elements;\n      v.x = e[0] * x + e[4] * y + e[8] * z;\n      v.y = e[1] * x + e[5] * y + e[9] * z;\n      v.z = e[2] * x + e[6] * y + e[10] * z;\n      return v;\n    }\n    static transformFreeVectorInverse(v, m) {\n      const x = v.x, y = v.y, z = v.z;\n      const e = m.elements;\n      v.x = e[0] * x + e[1] * y + e[2] * z;\n      v.y = e[4] * x + e[5] * y + e[6] * z;\n      v.z = e[8] * x + e[9] * y + e[10] * z;\n      return v;\n    }\n    static transformTiedVectorInverse(v, m) {\n      const x = v.x, y = v.y, z = v.z;\n      const e = m.elements;\n      v.x = e[0] * x + e[1] * y + e[2] * z - e[12];\n      v.y = e[4] * x + e[5] * y + e[6] * z - e[13];\n      v.z = e[8] * x + e[9] * y + e[10] * z - e[14];\n      return v;\n    }\n    static transformPlaneToLocalSpace(plane, m, resultPlane) {\n      resultPlane.normal.copy(plane.normal);\n      resultPlane.constant = plane.constant;\n      const referencePoint = ConvexObjectBreaker2.transformTiedVectorInverse(plane.coplanarPoint(_v1), m);\n      ConvexObjectBreaker2.transformFreeVectorInverse(resultPlane.normal, m);\n      resultPlane.constant = -referencePoint.dot(resultPlane.normal);\n    }\n  }\n  return ConvexObjectBreaker2;\n})();\nexport {\n  ConvexObjectBreaker\n};\n//# sourceMappingURL=ConvexObjectBreaker.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}