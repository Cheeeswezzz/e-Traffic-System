{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 5000,\n  // 5 second timeout\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  } else if (error.code === 'NETWORK_ERROR' || error.message === 'Network Error') {\n    // Handle network errors (backend not available)\n    console.warn('Backend API not available:', error.message);\n    // Don't redirect on network errors, let the app handle it gracefully\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: (email, password) => api.post('/auth/login', {\n    email,\n    password\n  }),\n  logout: () => api.post('/auth/logout'),\n  getCurrentUser: () => api.get('/auth/me'),\n  changePassword: (currentPassword, newPassword) => api.put('/auth/change-password', {\n    currentPassword,\n    newPassword\n  })\n};\n\n// Admin API\nexport const adminAPI = {\n  getDashboard: () => api.get('/admin/dashboard'),\n  getEnforcers: params => api.get('/admin/enforcers', {\n    params\n  }),\n  createEnforcer: data => api.post('/admin/enforcers', data),\n  updateEnforcer: (id, data) => api.put(`/admin/enforcers/${id}`, data),\n  deleteEnforcer: id => api.delete(`/admin/enforcers/${id}`),\n  getNextBadgeNumber: () => api.get('/admin/next-badge-number'),\n  getSettings: () => api.get('/admin/settings'),\n  updateSettings: data => api.put('/admin/settings', data)\n};\n\n// Violations API\nexport const violationsAPI = {\n  getViolations: params => api.get('/violations', {\n    params\n  }),\n  getViolation: id => api.get(`/violations/${id}`),\n  createViolation: data => api.post('/violations', data),\n  updateViolation: (id, data) => api.put(`/violations/${id}`, data),\n  deleteViolation: id => api.delete(`/violations/${id}`),\n  getViolationStats: () => api.get('/violations/stats/overview'),\n  exportViolations: params => {\n    // Build URL with parameters\n    const queryString = new URLSearchParams(params).toString();\n    const url = `${API_BASE_URL}/violations/export?${queryString}`;\n\n    // Return a direct fetch call for better control over the response\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n};\n\n// Reports API\nexport const reportsAPI = {\n  getViolationsReport: params => api.get('/reports/violations', {\n    params\n  }),\n  getEnforcersReport: params => api.get('/reports/enforcers', {\n    params\n  }),\n  getDailySummary: params => api.get('/reports/daily-summary', {\n    params\n  }),\n  getMonthlyReport: params => api.get('/reports/monthly', {\n    params\n  }),\n  testDatabase: () => api.get('/reports/test-db')\n};\n\n// SMS API\nexport const smsAPI = {\n  getLogs: params => api.get('/sms/logs', {\n    params\n  }),\n  getStats: () => api.get('/sms/stats'),\n  sendTest: data => api.post('/sms/test', data)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","code","message","console","warn","authAPI","login","email","password","post","logout","getCurrentUser","get","changePassword","currentPassword","newPassword","put","adminAPI","getDashboard","getEnforcers","params","createEnforcer","data","updateEnforcer","id","deleteEnforcer","delete","getNextBadgeNumber","getSettings","updateSettings","violationsAPI","getViolations","getViolation","createViolation","updateViolation","deleteViolation","getViolationStats","exportViolations","queryString","URLSearchParams","toString","url","fetch","method","reportsAPI","getViolationsReport","getEnforcersReport","getDailySummary","getMonthlyReport","testDatabase","smsAPI","getLogs","getStats","sendTest"],"sources":["C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 5000, // 5 second timeout\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    } else if (error.code === 'NETWORK_ERROR' || error.message === 'Network Error') {\n      // Handle network errors (backend not available)\n      console.warn('Backend API not available:', error.message);\n      // Don't redirect on network errors, let the app handle it gracefully\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  login: (email, password) => api.post('/auth/login', { email, password }),\n  logout: () => api.post('/auth/logout'),\n  getCurrentUser: () => api.get('/auth/me'),\n  changePassword: (currentPassword, newPassword) =>\n    api.put('/auth/change-password', { currentPassword, newPassword }),\n};\n\n// Admin API\nexport const adminAPI = {\n  getDashboard: () => api.get('/admin/dashboard'),\n  getEnforcers: (params) => api.get('/admin/enforcers', { params }),\n  createEnforcer: (data) => api.post('/admin/enforcers', data),\n  updateEnforcer: (id, data) => api.put(`/admin/enforcers/${id}`, data),\n  deleteEnforcer: (id) => api.delete(`/admin/enforcers/${id}`),\n  getNextBadgeNumber: () => api.get('/admin/next-badge-number'),\n  getSettings: () => api.get('/admin/settings'),\n  updateSettings: (data) => api.put('/admin/settings', data),\n};\n\n// Violations API\nexport const violationsAPI = {\n  getViolations: (params) => api.get('/violations', { params }),\n  getViolation: (id) => api.get(`/violations/${id}`),\n  createViolation: (data) => api.post('/violations', data),\n  updateViolation: (id, data) => api.put(`/violations/${id}`, data),\n  deleteViolation: (id) => api.delete(`/violations/${id}`),\n  getViolationStats: () => api.get('/violations/stats/overview'),\n  exportViolations: (params) => {\n    // Build URL with parameters\n    const queryString = new URLSearchParams(params).toString();\n    const url = `${API_BASE_URL}/violations/export?${queryString}`;\n    \n    // Return a direct fetch call for better control over the response\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  },\n};\n\n// Reports API\nexport const reportsAPI = {\n  getViolationsReport: (params) => api.get('/reports/violations', { params }),\n  getEnforcersReport: (params) => api.get('/reports/enforcers', { params }),\n  getDailySummary: (params) => api.get('/reports/daily-summary', { params }),\n  getMonthlyReport: (params) => api.get('/reports/monthly', { params }),\n  testDatabase: () => api.get('/reports/test-db'),\n};\n\n// SMS API\nexport const smsAPI = {\n  getLogs: (params) => api.get('/sms/logs', { params }),\n  getStats: () => api.get('/sms/stats'),\n  sendTest: (data) => api.post('/sms/test', data),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}