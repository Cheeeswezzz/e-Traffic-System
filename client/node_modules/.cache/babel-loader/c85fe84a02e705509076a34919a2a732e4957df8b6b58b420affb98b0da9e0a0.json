{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Marcelo\\\\OneDrive\\\\Documents\\\\Desktop\\\\e-traffic system\\\\client\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { adminAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Fetch notifications from the server\n  const {\n    data: notificationsData,\n    refetch\n  } = useQuery({\n    queryKey: ['notifications'],\n    queryFn: () => adminAPI.getNotifications(),\n    refetchInterval: 30000,\n    // Refetch every 30 seconds\n    onSuccess: data => {\n      if (data !== null && data !== void 0 && data.data) {\n        setNotifications(data.data);\n        setUnreadCount(data.data.filter(n => !n.read).length);\n      }\n    }\n  });\n\n  // Mark notification as read\n  const markAsRead = async notificationId => {\n    try {\n      await adminAPI.markNotificationAsRead(notificationId);\n      setNotifications(prev => prev.map(n => n.id === notificationId ? {\n        ...n,\n        read: true\n      } : n));\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      console.error('Failed to mark notification as read:', error);\n    }\n  };\n\n  // Mark all notifications as read\n  const markAllAsRead = async () => {\n    try {\n      await adminAPI.markAllNotificationsAsRead();\n      setNotifications(prev => prev.map(n => ({\n        ...n,\n        read: true\n      })));\n      setUnreadCount(0);\n    } catch (error) {\n      console.error('Failed to mark all notifications as read:', error);\n    }\n  };\n\n  // Add a new notification (for real-time updates)\n  const addNotification = notification => {\n    setNotifications(prev => [notification, ...prev]);\n    if (!notification.read) {\n      setUnreadCount(prev => prev + 1);\n    }\n  };\n  const value = {\n    notifications,\n    unreadCount,\n    isOpen,\n    setIsOpen,\n    markAsRead,\n    markAllAsRead,\n    addNotification,\n    refetch\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"lqTKO4OlOAhvd0aYJ2eoPsUHAx8=\", false, function () {\n  return [useQuery];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useQuery","adminAPI","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","unreadCount","setUnreadCount","isOpen","setIsOpen","data","notificationsData","refetch","queryKey","queryFn","getNotifications","refetchInterval","onSuccess","filter","n","read","length","markAsRead","notificationId","markNotificationAsRead","prev","map","id","Math","max","error","console","markAllAsRead","markAllNotificationsAsRead","addNotification","notification","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { adminAPI } from '../services/api';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport const useNotifications = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  // Fetch notifications from the server\r\n  const { data: notificationsData, refetch } = useQuery({\r\n    queryKey: ['notifications'],\r\n    queryFn: () => adminAPI.getNotifications(),\r\n    refetchInterval: 30000, // Refetch every 30 seconds\r\n    onSuccess: (data) => {\r\n      if (data?.data) {\r\n        setNotifications(data.data);\r\n        setUnreadCount(data.data.filter(n => !n.read).length);\r\n      }\r\n    }\r\n  });\r\n\r\n  // Mark notification as read\r\n  const markAsRead = async (notificationId) => {\r\n    try {\r\n      await adminAPI.markNotificationAsRead(notificationId);\r\n      setNotifications(prev => \r\n        prev.map(n => n.id === notificationId ? { ...n, read: true } : n)\r\n      );\r\n      setUnreadCount(prev => Math.max(0, prev - 1));\r\n    } catch (error) {\r\n      console.error('Failed to mark notification as read:', error);\r\n    }\r\n  };\r\n\r\n  // Mark all notifications as read\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      await adminAPI.markAllNotificationsAsRead();\r\n      setNotifications(prev => prev.map(n => ({ ...n, read: true })));\r\n      setUnreadCount(0);\r\n    } catch (error) {\r\n      console.error('Failed to mark all notifications as read:', error);\r\n    }\r\n  };\r\n\r\n  // Add a new notification (for real-time updates)\r\n  const addNotification = (notification) => {\r\n    setNotifications(prev => [notification, ...prev]);\r\n    if (!notification.read) {\r\n      setUnreadCount(prev => prev + 1);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    notifications,\r\n    unreadCount,\r\n    isOpen,\r\n    setIsOpen,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    addNotification,\r\n    refetch\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}