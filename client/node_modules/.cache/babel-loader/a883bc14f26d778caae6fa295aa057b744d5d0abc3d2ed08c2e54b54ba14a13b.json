{"ast":null,"code":"import { Vector2 } from \"three\";\nconst NormalMapShader = {\n  uniforms: {\n    heightMap: {\n      value: null\n    },\n    resolution: {\n      value: /* @__PURE__ */new Vector2(512, 512)\n    },\n    scale: {\n      value: /* @__PURE__ */new Vector2(1, 1)\n    },\n    height: {\n      value: 0.05\n    }\n  },\n  vertexShader: (/* glsl */\n  `\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvUv = uv;\n    \tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n    }\n  `),\n  fragmentShader: (/* glsl */\n  `\n    uniform float height;\n    uniform vec2 resolution;\n    uniform sampler2D heightMap;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    \tfloat val = texture2D( heightMap, vUv ).x;\n\n    \tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\n    \tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\n\n    \tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\n\n    }\n  `)\n};\nexport { NormalMapShader };","map":{"version":3,"names":["Vector2","NormalMapShader","uniforms","heightMap","value","resolution","scale","height","vertexShader","fragmentShader"],"sources":["C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/three-stdlib/shaders/NormalMapShader.js"],"sourcesContent":["import { Vector2 } from \"three\";\nconst NormalMapShader = {\n  uniforms: {\n    heightMap: { value: null },\n    resolution: { value: /* @__PURE__ */ new Vector2(512, 512) },\n    scale: { value: /* @__PURE__ */ new Vector2(1, 1) },\n    height: { value: 0.05 }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvUv = uv;\n    \tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n    }\n  `\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n    uniform float height;\n    uniform vec2 resolution;\n    uniform sampler2D heightMap;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    \tfloat val = texture2D( heightMap, vUv ).x;\n\n    \tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\n    \tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\n\n    \tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\n\n    }\n  `\n  )\n};\nexport {\n  NormalMapShader\n};\n//# sourceMappingURL=NormalMapShader.js.map\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,MAAMC,eAAe,GAAG;EACtBC,QAAQ,EAAE;IACRC,SAAS,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IAC1BC,UAAU,EAAE;MAAED,KAAK,EAAE,eAAgB,IAAIJ,OAAO,CAAC,GAAG,EAAE,GAAG;IAAE,CAAC;IAC5DM,KAAK,EAAE;MAAEF,KAAK,EAAE,eAAgB,IAAIJ,OAAO,CAAC,CAAC,EAAE,CAAC;IAAE,CAAC;IACnDO,MAAM,EAAE;MAAEH,KAAK,EAAE;IAAK;EACxB,CAAC;EACDI,YAAY,GACV;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CACA;EACDC,cAAc,GACZ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AAEH,CAAC;AACD,SACER,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}