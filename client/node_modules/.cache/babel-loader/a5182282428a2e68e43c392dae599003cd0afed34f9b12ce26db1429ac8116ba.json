{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, UnsignedByteType, CompressedTexture, LinearFilter, LinearMipmapLinearFilter, FloatType, HalfFloatType, DataTexture, RGFormat, RedFormat, RGBA_ASTC_6x6_Format } from \"three\";\nimport { WorkerPool } from \"../utils/WorkerPool.js\";\nimport { KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_ZSTD, KHR_SUPERCOMPRESSION_NONE, KHR_DF_PRIMARIES_BT709, KHR_DF_TRANSFER_SRGB, KHR_DF_PRIMARIES_DISPLAYP3, KHR_DF_PRIMARIES_UNSPECIFIED, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK } from \"../libs/ktx-parse.js\";\nimport { ZSTDDecoder } from \"../libs/zstddec.js\";\nimport { CompressedCubeTexture } from \"../_polyfill/CompressedCubeTexture.js\";\nimport { CompressedArrayTexture } from \"../_polyfill/CompressedArrayTexture.js\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nconst LinearEncoding = 3e3;\nconst sRGBEncoding = 3001;\nconst NoColorSpace = \"\";\nconst DisplayP3ColorSpace = \"display-p3\";\nconst LinearDisplayP3ColorSpace = \"display-p3-linear\";\nconst LinearSRGBColorSpace = \"srgb-linear\";\nconst SRGBColorSpace = \"srgb\";\nconst _taskCache = /* @__PURE__ */new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\nconst KTX2Loader = /* @__PURE__ */(() => {\n  const _KTX2Loader = class extends Loader {\n    constructor(manager) {\n      super(manager);\n      this.transcoderPath = \"\";\n      this.transcoderBinary = null;\n      this.transcoderPending = null;\n      this.workerPool = new WorkerPool();\n      this.workerSourceURL = \"\";\n      this.workerConfig = null;\n      if (typeof MSC_TRANSCODER !== \"undefined\") {\n        console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n      }\n    }\n    setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n    setWorkerLimit(num) {\n      this.workerPool.setWorkerLimit(num);\n      return this;\n    }\n    detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n        etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n        etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n        dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n        bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n        pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n      };\n      if (renderer.capabilities.isWebGL2) {\n        this.workerConfig.etc1Supported = false;\n      }\n      return this;\n    }\n    init() {\n      if (!this.transcoderPending) {\n        const jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        const jsContent = jsLoader.loadAsync(\"basis_transcoder.js\");\n        const binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType(\"arraybuffer\");\n        binaryLoader.setWithCredentials(this.withCredentials);\n        const binaryContent = binaryLoader.loadAsync(\"basis_transcoder.wasm\");\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n          const fn = _KTX2Loader.BasisWorker.toString();\n          const body = [\"/* constants */\", \"let _EngineFormat = \" + JSON.stringify(_KTX2Loader.EngineFormat), \"let _TranscoderFormat = \" + JSON.stringify(_KTX2Loader.TranscoderFormat), \"let _BasisFormat = \" + JSON.stringify(_KTX2Loader.BasisFormat), \"/* basis_transcoder.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n          this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          this.transcoderBinary = binaryContent2;\n          this.workerPool.setWorkerCreator(() => {\n            const worker = new Worker(this.workerSourceURL);\n            const transcoderBinary = this.transcoderBinary.slice(0);\n            worker.postMessage({\n              type: \"init\",\n              config: this.workerConfig,\n              transcoderBinary\n            }, [transcoderBinary]);\n            return worker;\n          });\n        });\n        if (_activeLoaders > 0) {\n          console.warn(\"THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.\");\n        }\n        _activeLoaders++;\n      }\n      return this.transcoderPending;\n    }\n    load(url, onLoad, onProgress, onError) {\n      if (this.workerConfig === null) {\n        throw new Error(\"THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.\");\n      }\n      const loader = new FileLoader(this.manager);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, buffer => {\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n      }, onProgress, onError);\n    }\n    _createTextureFrom(transcodeResult, container) {\n      const {\n        faces,\n        width,\n        height,\n        format,\n        type,\n        error,\n        dfdFlags\n      } = transcodeResult;\n      if (type === \"error\") return Promise.reject(error);\n      let texture;\n      if (container.faceCount === 6) {\n        texture = new CompressedCubeTexture(faces, format, UnsignedByteType);\n      } else {\n        const mipmaps = faces[0].mipmaps;\n        texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      }\n      texture.minFilter = faces[0].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      const colorSpace = parseColorSpace(container);\n      if (\"colorSpace\" in texture) texture.colorSpace = colorSpace;else texture.encoding = colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;\n      texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n      return texture;\n    }\n    /**\n     * @param {ArrayBuffer} buffer\n     * @param {object?} config\n     * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n     */\n    async _createTexture(buffer, config = {}) {\n      const container = read(new Uint8Array(buffer));\n      if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n        return createRawTexture(container);\n      }\n      const taskConfig = config;\n      const texturePending = this.init().then(() => {\n        return this.workerPool.postMessage({\n          type: \"transcode\",\n          buffer,\n          taskConfig\n        }, [buffer]);\n      }).then(e => this._createTextureFrom(e.data, container));\n      _taskCache.set(buffer, {\n        promise: texturePending\n      });\n      return texturePending;\n    }\n    dispose() {\n      this.workerPool.dispose();\n      if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n      _activeLoaders--;\n      return this;\n    }\n  };\n  let KTX2Loader2 = _KTX2Loader;\n  /* CONSTANTS */\n  __publicField(KTX2Loader2, \"BasisFormat\", {\n    ETC1S: 0,\n    UASTC_4x4: 1\n  });\n  __publicField(KTX2Loader2, \"TranscoderFormat\", {\n    ETC1: 0,\n    ETC2: 1,\n    BC1: 2,\n    BC3: 3,\n    BC4: 4,\n    BC5: 5,\n    BC7_M6_OPAQUE_ONLY: 6,\n    BC7_M5: 7,\n    PVRTC1_4_RGB: 8,\n    PVRTC1_4_RGBA: 9,\n    ASTC_4x4: 10,\n    ATC_RGB: 11,\n    ATC_RGBA_INTERPOLATED_ALPHA: 12,\n    RGBA32: 13,\n    RGB565: 14,\n    BGR565: 15,\n    RGBA4444: 16\n  });\n  __publicField(KTX2Loader2, \"EngineFormat\", {\n    RGBAFormat,\n    RGBA_ASTC_4x4_Format,\n    RGBA_BPTC_Format,\n    RGBA_ETC2_EAC_Format,\n    RGBA_PVRTC_4BPPV1_Format,\n    RGBA_S3TC_DXT5_Format,\n    RGB_ETC1_Format,\n    RGB_ETC2_Format,\n    RGB_PVRTC_4BPPV1_Format,\n    RGB_S3TC_DXT1_Format\n  });\n  /* WEB WORKER */\n  __publicField(KTX2Loader2, \"BasisWorker\", function () {\n    let config;\n    let transcoderPending;\n    let BasisModule;\n    const EngineFormat = _EngineFormat;\n    const TranscoderFormat = _TranscoderFormat;\n    const BasisFormat = _BasisFormat;\n    self.addEventListener(\"message\", function (e) {\n      const message = e.data;\n      switch (message.type) {\n        case \"init\":\n          config = message.config;\n          init(message.transcoderBinary);\n          break;\n        case \"transcode\":\n          transcoderPending.then(() => {\n            try {\n              const {\n                faces,\n                buffers,\n                width,\n                height,\n                hasAlpha,\n                format,\n                dfdFlags\n              } = transcode(message.buffer);\n              self.postMessage({\n                type: \"transcode\",\n                id: message.id,\n                faces,\n                width,\n                height,\n                hasAlpha,\n                format,\n                dfdFlags\n              }, buffers);\n            } catch (error) {\n              console.error(error);\n              self.postMessage({\n                type: \"error\",\n                id: message.id,\n                error: error.message\n              });\n            }\n          });\n          break;\n      }\n    });\n    function init(wasmBinary) {\n      transcoderPending = new Promise(resolve => {\n        BasisModule = {\n          wasmBinary,\n          onRuntimeInitialized: resolve\n        };\n        BASIS(BasisModule);\n      }).then(() => {\n        BasisModule.initializeBasis();\n        if (BasisModule.KTX2File === void 0) {\n          console.warn(\"THREE.KTX2Loader: Please update Basis Universal transcoder.\");\n        }\n      });\n    }\n    function transcode(buffer) {\n      const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n      function cleanup() {\n        ktx2File.close();\n        ktx2File.delete();\n      }\n      if (!ktx2File.isValid()) {\n        cleanup();\n        throw new Error(\"THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file\");\n      }\n      const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n      const width = ktx2File.getWidth();\n      const height = ktx2File.getHeight();\n      const layerCount = ktx2File.getLayers() || 1;\n      const levelCount = ktx2File.getLevels();\n      const faceCount = ktx2File.getFaces();\n      const hasAlpha = ktx2File.getHasAlpha();\n      const dfdFlags = ktx2File.getDFDFlags();\n      const {\n        transcoderFormat,\n        engineFormat\n      } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n      if (!width || !height || !levelCount) {\n        cleanup();\n        throw new Error(\"THREE.KTX2Loader:\tInvalid texture\");\n      }\n      if (!ktx2File.startTranscoding()) {\n        cleanup();\n        throw new Error(\"THREE.KTX2Loader: .startTranscoding failed\");\n      }\n      const faces = [];\n      const buffers = [];\n      for (let face = 0; face < faceCount; face++) {\n        const mipmaps = [];\n        for (let mip = 0; mip < levelCount; mip++) {\n          const layerMips = [];\n          let mipWidth, mipHeight;\n          for (let layer = 0; layer < layerCount; layer++) {\n            const levelInfo = ktx2File.getImageLevelInfo(mip, layer, face);\n            if (face === 0 && mip === 0 && layer === 0 && (levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0)) {\n              console.warn(\"THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.\");\n            }\n            if (levelCount > 1) {\n              mipWidth = levelInfo.origWidth;\n              mipHeight = levelInfo.origHeight;\n            } else {\n              mipWidth = levelInfo.width;\n              mipHeight = levelInfo.height;\n            }\n            const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n            const status = ktx2File.transcodeImage(dst, mip, layer, face, transcoderFormat, 0, -1, -1);\n            if (!status) {\n              cleanup();\n              throw new Error(\"THREE.KTX2Loader: .transcodeImage failed.\");\n            }\n            layerMips.push(dst);\n          }\n          const mipData = concat(layerMips);\n          mipmaps.push({\n            data: mipData,\n            width: mipWidth,\n            height: mipHeight\n          });\n          buffers.push(mipData.buffer);\n        }\n        faces.push({\n          mipmaps,\n          width,\n          height,\n          format: engineFormat\n        });\n      }\n      cleanup();\n      return {\n        faces,\n        buffers,\n        width,\n        height,\n        hasAlpha,\n        format: engineFormat,\n        dfdFlags\n      };\n    }\n    const FORMAT_OPTIONS = [{\n      if: \"astcSupported\",\n      basisFormat: [BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n      engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n      priorityETC1S: Infinity,\n      priorityUASTC: 1,\n      needsPowerOfTwo: false\n    }, {\n      if: \"bptcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n      engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n      priorityETC1S: 3,\n      priorityUASTC: 2,\n      needsPowerOfTwo: false\n    }, {\n      if: \"dxtSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n      engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n      priorityETC1S: 4,\n      priorityUASTC: 5,\n      needsPowerOfTwo: false\n    }, {\n      if: \"etc2Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n      engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n      priorityETC1S: 1,\n      priorityUASTC: 3,\n      needsPowerOfTwo: false\n    }, {\n      if: \"etc1Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1],\n      engineFormat: [EngineFormat.RGB_ETC1_Format],\n      priorityETC1S: 2,\n      priorityUASTC: 4,\n      needsPowerOfTwo: false\n    }, {\n      if: \"pvrtcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n      engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n      priorityETC1S: 5,\n      priorityUASTC: 6,\n      needsPowerOfTwo: true\n    }];\n    const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n      return a.priorityETC1S - b.priorityETC1S;\n    });\n    const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n      return a.priorityUASTC - b.priorityUASTC;\n    });\n    function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n      let transcoderFormat;\n      let engineFormat;\n      const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n      for (let i = 0; i < options.length; i++) {\n        const opt = options[i];\n        if (!config[opt.if]) continue;\n        if (!opt.basisFormat.includes(basisFormat)) continue;\n        if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n        if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n        transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n        engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n        return {\n          transcoderFormat,\n          engineFormat\n        };\n      }\n      console.warn(\"THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.\");\n      transcoderFormat = TranscoderFormat.RGBA32;\n      engineFormat = EngineFormat.RGBAFormat;\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n    function isPowerOfTwo(value) {\n      if (value <= 2) return true;\n      return (value & value - 1) === 0 && value !== 0;\n    }\n    function concat(arrays) {\n      if (arrays.length === 1) return arrays[0];\n      let totalByteLength = 0;\n      for (let i = 0; i < arrays.length; i++) {\n        const array = arrays[i];\n        totalByteLength += array.byteLength;\n      }\n      const result = new Uint8Array(totalByteLength);\n      let byteOffset = 0;\n      for (let i = 0; i < arrays.length; i++) {\n        const array = arrays[i];\n        result.set(array, byteOffset);\n        byteOffset += array.byteLength;\n      }\n      return result;\n    }\n  });\n  return KTX2Loader2;\n})();\nconst UNCOMPRESSED_FORMATS = /* @__PURE__ */new Set([RGBAFormat, RGFormat, RedFormat]);\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat,\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: RGBA_ASTC_6x6_Format,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: RGBA_ASTC_6x6_Format\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: UnsignedByteType,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: UnsignedByteType\n};\nasync function createRawTexture(container) {\n  const {\n    vkFormat\n  } = container;\n  if (FORMAT_MAP[vkFormat] === void 0) {\n    throw new Error(\"THREE.KTX2Loader: Unsupported vkFormat.\");\n  }\n  let zstd;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd2 = new ZSTDDecoder();\n        await zstd2.init();\n        resolve(zstd2);\n      });\n    }\n    zstd = await _zstd;\n  }\n  const mipmaps = [];\n  for (let levelIndex = 0; levelIndex < container.levels.length; levelIndex++) {\n    const levelWidth = Math.max(1, container.pixelWidth >> levelIndex);\n    const levelHeight = Math.max(1, container.pixelHeight >> levelIndex);\n    const levelDepth = container.pixelDepth ? Math.max(1, container.pixelDepth >> levelIndex) : 0;\n    const level = container.levels[levelIndex];\n    let levelData;\n    if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n      levelData = level.levelData;\n    } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n      levelData = zstd.decode(level.levelData, level.uncompressedByteLength);\n    } else {\n      throw new Error(\"THREE.KTX2Loader: Unsupported supercompressionScheme.\");\n    }\n    let data;\n    if (TYPE_MAP[vkFormat] === FloatType) {\n      data = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n    } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n      data = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n    } else {\n      data = levelData;\n    }\n    mipmaps.push({\n      data,\n      width: levelWidth,\n      height: levelHeight,\n      depth: levelDepth\n    });\n  }\n  let texture;\n  if (UNCOMPRESSED_FORMATS.has(FORMAT_MAP[vkFormat])) {\n    texture = container.pixelDepth === 0 ? new DataTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight) : new Data3DTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight, container.pixelDepth);\n  } else {\n    if (container.pixelDepth > 0) throw new Error(\"THREE.KTX2Loader: Unsupported pixelDepth.\");\n    texture = new CompressedTexture(mipmaps, container.pixelWidth, container.pixelHeight);\n  }\n  texture.mipmaps = mipmaps;\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.needsUpdate = true;\n  const colorSpace = parseColorSpace(container);\n  if (\"colorSpace\" in texture) texture.colorSpace = colorSpace;else texture.encoding = colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;\n  return Promise.resolve(texture);\n}\nfunction parseColorSpace(container) {\n  const dfd = container.dataFormatDescriptor[0];\n  if (dfd.colorPrimaries === KHR_DF_PRIMARIES_BT709) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : LinearSRGBColorSpace;\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_DISPLAYP3) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? DisplayP3ColorSpace : LinearDisplayP3ColorSpace;\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_UNSPECIFIED) {\n    return NoColorSpace;\n  } else {\n    console.warn(`THREE.KTX2Loader: Unsupported color primaries, \"${dfd.colorPrimaries}\"`);\n    return NoColorSpace;\n  }\n}\nexport { KTX2Loader };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Loader","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FileLoader","UnsignedByteType","CompressedTexture","LinearFilter","LinearMipmapLinearFilter","FloatType","HalfFloatType","DataTexture","RGFormat","RedFormat","RGBA_ASTC_6x6_Format","WorkerPool","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","read","VK_FORMAT_UNDEFINED","KHR_SUPERCOMPRESSION_ZSTD","KHR_SUPERCOMPRESSION_NONE","KHR_DF_PRIMARIES_BT709","KHR_DF_TRANSFER_SRGB","KHR_DF_PRIMARIES_DISPLAYP3","KHR_DF_PRIMARIES_UNSPECIFIED","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","VK_FORMAT_ASTC_6x6_SRGB_BLOCK","VK_FORMAT_ASTC_6x6_UNORM_BLOCK","ZSTDDecoder","CompressedCubeTexture","CompressedArrayTexture","Data3DTexture","LinearEncoding","sRGBEncoding","NoColorSpace","DisplayP3ColorSpace","LinearDisplayP3ColorSpace","LinearSRGBColorSpace","SRGBColorSpace","_taskCache","WeakMap","_activeLoaders","_zstd","KTX2Loader","_KTX2Loader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","setTranscoderPath","path","setWorkerLimit","num","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","init","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","jsContent2","binaryContent2","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","Error","loader","buffer","cachedTask","get","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","container","faces","width","height","format","error","dfdFlags","reject","faceCount","mipmaps","layerCount","minFilter","length","magFilter","generateMipmaps","needsUpdate","colorSpace","parseColorSpace","encoding","premultiplyAlpha","Uint8Array","vkFormat","createRawTexture","taskConfig","texturePending","e","data","set","dispose","revokeObjectURL","KTX2Loader2","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","buffers","hasAlpha","transcode","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","getLayers","levelCount","getLevels","getFaces","getHasAlpha","getDFDFlags","transcoderFormat","engineFormat","getTranscoderFormat","startTranscoding","face","mip","layerMips","mipWidth","mipHeight","layer","levelInfo","getImageLevelInfo","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","push","mipData","concat","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","i","opt","includes","isPowerOfTwo","arrays","totalByteLength","array","byteLength","result","byteOffset","UNCOMPRESSED_FORMATS","Set","FORMAT_MAP","TYPE_MAP","zstd","supercompressionScheme","zstd2","levelIndex","levels","levelWidth","Math","max","pixelWidth","levelHeight","pixelHeight","levelDepth","pixelDepth","level","levelData","decode","uncompressedByteLength","Float32Array","BYTES_PER_ELEMENT","Uint16Array","depth","dfd","dataFormatDescriptor","colorPrimaries","transferFunction"],"sources":["C:/Users/Marcelo/OneDrive/Documents/Desktop/e-traffic system/client/node_modules/three-stdlib/loaders/KTX2Loader.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, UnsignedByteType, CompressedTexture, LinearFilter, LinearMipmapLinearFilter, FloatType, HalfFloatType, DataTexture, RGFormat, RedFormat, RGBA_ASTC_6x6_Format } from \"three\";\nimport { WorkerPool } from \"../utils/WorkerPool.js\";\nimport { KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_ZSTD, KHR_SUPERCOMPRESSION_NONE, KHR_DF_PRIMARIES_BT709, KHR_DF_TRANSFER_SRGB, KHR_DF_PRIMARIES_DISPLAYP3, KHR_DF_PRIMARIES_UNSPECIFIED, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK } from \"../libs/ktx-parse.js\";\nimport { ZSTDDecoder } from \"../libs/zstddec.js\";\nimport { CompressedCubeTexture } from \"../_polyfill/CompressedCubeTexture.js\";\nimport { CompressedArrayTexture } from \"../_polyfill/CompressedArrayTexture.js\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nconst LinearEncoding = 3e3;\nconst sRGBEncoding = 3001;\nconst NoColorSpace = \"\";\nconst DisplayP3ColorSpace = \"display-p3\";\nconst LinearDisplayP3ColorSpace = \"display-p3-linear\";\nconst LinearSRGBColorSpace = \"srgb-linear\";\nconst SRGBColorSpace = \"srgb\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\nconst KTX2Loader = /* @__PURE__ */ (() => {\n  const _KTX2Loader = class extends Loader {\n    constructor(manager) {\n      super(manager);\n      this.transcoderPath = \"\";\n      this.transcoderBinary = null;\n      this.transcoderPending = null;\n      this.workerPool = new WorkerPool();\n      this.workerSourceURL = \"\";\n      this.workerConfig = null;\n      if (typeof MSC_TRANSCODER !== \"undefined\") {\n        console.warn(\n          'THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.'\n        );\n      }\n    }\n    setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n    setWorkerLimit(num) {\n      this.workerPool.setWorkerLimit(num);\n      return this;\n    }\n    detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n        etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n        etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n        dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n        bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n        pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n      };\n      if (renderer.capabilities.isWebGL2) {\n        this.workerConfig.etc1Supported = false;\n      }\n      return this;\n    }\n    init() {\n      if (!this.transcoderPending) {\n        const jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        const jsContent = jsLoader.loadAsync(\"basis_transcoder.js\");\n        const binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType(\"arraybuffer\");\n        binaryLoader.setWithCredentials(this.withCredentials);\n        const binaryContent = binaryLoader.loadAsync(\"basis_transcoder.wasm\");\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n          const fn = _KTX2Loader.BasisWorker.toString();\n          const body = [\n            \"/* constants */\",\n            \"let _EngineFormat = \" + JSON.stringify(_KTX2Loader.EngineFormat),\n            \"let _TranscoderFormat = \" + JSON.stringify(_KTX2Loader.TranscoderFormat),\n            \"let _BasisFormat = \" + JSON.stringify(_KTX2Loader.BasisFormat),\n            \"/* basis_transcoder.js */\",\n            jsContent2,\n            \"/* worker */\",\n            fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n          ].join(\"\\n\");\n          this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          this.transcoderBinary = binaryContent2;\n          this.workerPool.setWorkerCreator(() => {\n            const worker = new Worker(this.workerSourceURL);\n            const transcoderBinary = this.transcoderBinary.slice(0);\n            worker.postMessage({ type: \"init\", config: this.workerConfig, transcoderBinary }, [transcoderBinary]);\n            return worker;\n          });\n        });\n        if (_activeLoaders > 0) {\n          console.warn(\n            \"THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.\"\n          );\n        }\n        _activeLoaders++;\n      }\n      return this.transcoderPending;\n    }\n    load(url, onLoad, onProgress, onError) {\n      if (this.workerConfig === null) {\n        throw new Error(\"THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.\");\n      }\n      const loader = new FileLoader(this.manager);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(\n        url,\n        (buffer) => {\n          if (_taskCache.has(buffer)) {\n            const cachedTask = _taskCache.get(buffer);\n            return cachedTask.promise.then(onLoad).catch(onError);\n          }\n          this._createTexture(buffer).then((texture) => onLoad ? onLoad(texture) : null).catch(onError);\n        },\n        onProgress,\n        onError\n      );\n    }\n    _createTextureFrom(transcodeResult, container) {\n      const { faces, width, height, format, type, error, dfdFlags } = transcodeResult;\n      if (type === \"error\")\n        return Promise.reject(error);\n      let texture;\n      if (container.faceCount === 6) {\n        texture = new CompressedCubeTexture(faces, format, UnsignedByteType);\n      } else {\n        const mipmaps = faces[0].mipmaps;\n        texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      }\n      texture.minFilter = faces[0].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      const colorSpace = parseColorSpace(container);\n      if (\"colorSpace\" in texture)\n        texture.colorSpace = colorSpace;\n      else\n        texture.encoding = colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;\n      texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n      return texture;\n    }\n    /**\n     * @param {ArrayBuffer} buffer\n     * @param {object?} config\n     * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n     */\n    async _createTexture(buffer, config = {}) {\n      const container = read(new Uint8Array(buffer));\n      if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n        return createRawTexture(container);\n      }\n      const taskConfig = config;\n      const texturePending = this.init().then(() => {\n        return this.workerPool.postMessage({ type: \"transcode\", buffer, taskConfig }, [buffer]);\n      }).then((e) => this._createTextureFrom(e.data, container));\n      _taskCache.set(buffer, { promise: texturePending });\n      return texturePending;\n    }\n    dispose() {\n      this.workerPool.dispose();\n      if (this.workerSourceURL)\n        URL.revokeObjectURL(this.workerSourceURL);\n      _activeLoaders--;\n      return this;\n    }\n  };\n  let KTX2Loader2 = _KTX2Loader;\n  /* CONSTANTS */\n  __publicField(KTX2Loader2, \"BasisFormat\", {\n    ETC1S: 0,\n    UASTC_4x4: 1\n  });\n  __publicField(KTX2Loader2, \"TranscoderFormat\", {\n    ETC1: 0,\n    ETC2: 1,\n    BC1: 2,\n    BC3: 3,\n    BC4: 4,\n    BC5: 5,\n    BC7_M6_OPAQUE_ONLY: 6,\n    BC7_M5: 7,\n    PVRTC1_4_RGB: 8,\n    PVRTC1_4_RGBA: 9,\n    ASTC_4x4: 10,\n    ATC_RGB: 11,\n    ATC_RGBA_INTERPOLATED_ALPHA: 12,\n    RGBA32: 13,\n    RGB565: 14,\n    BGR565: 15,\n    RGBA4444: 16\n  });\n  __publicField(KTX2Loader2, \"EngineFormat\", {\n    RGBAFormat,\n    RGBA_ASTC_4x4_Format,\n    RGBA_BPTC_Format,\n    RGBA_ETC2_EAC_Format,\n    RGBA_PVRTC_4BPPV1_Format,\n    RGBA_S3TC_DXT5_Format,\n    RGB_ETC1_Format,\n    RGB_ETC2_Format,\n    RGB_PVRTC_4BPPV1_Format,\n    RGB_S3TC_DXT1_Format\n  });\n  /* WEB WORKER */\n  __publicField(KTX2Loader2, \"BasisWorker\", function() {\n    let config;\n    let transcoderPending;\n    let BasisModule;\n    const EngineFormat = _EngineFormat;\n    const TranscoderFormat = _TranscoderFormat;\n    const BasisFormat = _BasisFormat;\n    self.addEventListener(\"message\", function(e) {\n      const message = e.data;\n      switch (message.type) {\n        case \"init\":\n          config = message.config;\n          init(message.transcoderBinary);\n          break;\n        case \"transcode\":\n          transcoderPending.then(() => {\n            try {\n              const { faces, buffers, width, height, hasAlpha, format, dfdFlags } = transcode(message.buffer);\n              self.postMessage(\n                { type: \"transcode\", id: message.id, faces, width, height, hasAlpha, format, dfdFlags },\n                buffers\n              );\n            } catch (error) {\n              console.error(error);\n              self.postMessage({ type: \"error\", id: message.id, error: error.message });\n            }\n          });\n          break;\n      }\n    });\n    function init(wasmBinary) {\n      transcoderPending = new Promise((resolve) => {\n        BasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n        BASIS(BasisModule);\n      }).then(() => {\n        BasisModule.initializeBasis();\n        if (BasisModule.KTX2File === void 0) {\n          console.warn(\"THREE.KTX2Loader: Please update Basis Universal transcoder.\");\n        }\n      });\n    }\n    function transcode(buffer) {\n      const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n      function cleanup() {\n        ktx2File.close();\n        ktx2File.delete();\n      }\n      if (!ktx2File.isValid()) {\n        cleanup();\n        throw new Error(\"THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file\");\n      }\n      const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n      const width = ktx2File.getWidth();\n      const height = ktx2File.getHeight();\n      const layerCount = ktx2File.getLayers() || 1;\n      const levelCount = ktx2File.getLevels();\n      const faceCount = ktx2File.getFaces();\n      const hasAlpha = ktx2File.getHasAlpha();\n      const dfdFlags = ktx2File.getDFDFlags();\n      const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n      if (!width || !height || !levelCount) {\n        cleanup();\n        throw new Error(\"THREE.KTX2Loader:\tInvalid texture\");\n      }\n      if (!ktx2File.startTranscoding()) {\n        cleanup();\n        throw new Error(\"THREE.KTX2Loader: .startTranscoding failed\");\n      }\n      const faces = [];\n      const buffers = [];\n      for (let face = 0; face < faceCount; face++) {\n        const mipmaps = [];\n        for (let mip = 0; mip < levelCount; mip++) {\n          const layerMips = [];\n          let mipWidth, mipHeight;\n          for (let layer = 0; layer < layerCount; layer++) {\n            const levelInfo = ktx2File.getImageLevelInfo(mip, layer, face);\n            if (face === 0 && mip === 0 && layer === 0 && (levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0)) {\n              console.warn(\"THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.\");\n            }\n            if (levelCount > 1) {\n              mipWidth = levelInfo.origWidth;\n              mipHeight = levelInfo.origHeight;\n            } else {\n              mipWidth = levelInfo.width;\n              mipHeight = levelInfo.height;\n            }\n            const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n            const status = ktx2File.transcodeImage(dst, mip, layer, face, transcoderFormat, 0, -1, -1);\n            if (!status) {\n              cleanup();\n              throw new Error(\"THREE.KTX2Loader: .transcodeImage failed.\");\n            }\n            layerMips.push(dst);\n          }\n          const mipData = concat(layerMips);\n          mipmaps.push({ data: mipData, width: mipWidth, height: mipHeight });\n          buffers.push(mipData.buffer);\n        }\n        faces.push({ mipmaps, width, height, format: engineFormat });\n      }\n      cleanup();\n      return { faces, buffers, width, height, hasAlpha, format: engineFormat, dfdFlags };\n    }\n    const FORMAT_OPTIONS = [\n      {\n        if: \"astcSupported\",\n        basisFormat: [BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n        engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n        priorityETC1S: Infinity,\n        priorityUASTC: 1,\n        needsPowerOfTwo: false\n      },\n      {\n        if: \"bptcSupported\",\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n        engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n        priorityETC1S: 3,\n        priorityUASTC: 2,\n        needsPowerOfTwo: false\n      },\n      {\n        if: \"dxtSupported\",\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n        engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n        priorityETC1S: 4,\n        priorityUASTC: 5,\n        needsPowerOfTwo: false\n      },\n      {\n        if: \"etc2Supported\",\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n        engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n        priorityETC1S: 1,\n        priorityUASTC: 3,\n        needsPowerOfTwo: false\n      },\n      {\n        if: \"etc1Supported\",\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.ETC1],\n        engineFormat: [EngineFormat.RGB_ETC1_Format],\n        priorityETC1S: 2,\n        priorityUASTC: 4,\n        needsPowerOfTwo: false\n      },\n      {\n        if: \"pvrtcSupported\",\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n        engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n        priorityETC1S: 5,\n        priorityUASTC: 6,\n        needsPowerOfTwo: true\n      }\n    ];\n    const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n      return a.priorityETC1S - b.priorityETC1S;\n    });\n    const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n      return a.priorityUASTC - b.priorityUASTC;\n    });\n    function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n      let transcoderFormat;\n      let engineFormat;\n      const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n      for (let i = 0; i < options.length; i++) {\n        const opt = options[i];\n        if (!config[opt.if])\n          continue;\n        if (!opt.basisFormat.includes(basisFormat))\n          continue;\n        if (hasAlpha && opt.transcoderFormat.length < 2)\n          continue;\n        if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height)))\n          continue;\n        transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n        engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n        return { transcoderFormat, engineFormat };\n      }\n      console.warn(\"THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.\");\n      transcoderFormat = TranscoderFormat.RGBA32;\n      engineFormat = EngineFormat.RGBAFormat;\n      return { transcoderFormat, engineFormat };\n    }\n    function isPowerOfTwo(value) {\n      if (value <= 2)\n        return true;\n      return (value & value - 1) === 0 && value !== 0;\n    }\n    function concat(arrays) {\n      if (arrays.length === 1)\n        return arrays[0];\n      let totalByteLength = 0;\n      for (let i = 0; i < arrays.length; i++) {\n        const array = arrays[i];\n        totalByteLength += array.byteLength;\n      }\n      const result = new Uint8Array(totalByteLength);\n      let byteOffset = 0;\n      for (let i = 0; i < arrays.length; i++) {\n        const array = arrays[i];\n        result.set(array, byteOffset);\n        byteOffset += array.byteLength;\n      }\n      return result;\n    }\n  });\n  return KTX2Loader2;\n})();\nconst UNCOMPRESSED_FORMATS = /* @__PURE__ */ new Set([RGBAFormat, RGFormat, RedFormat]);\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat,\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: RGBA_ASTC_6x6_Format,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: RGBA_ASTC_6x6_Format\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: UnsignedByteType,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: UnsignedByteType\n};\nasync function createRawTexture(container) {\n  const { vkFormat } = container;\n  if (FORMAT_MAP[vkFormat] === void 0) {\n    throw new Error(\"THREE.KTX2Loader: Unsupported vkFormat.\");\n  }\n  let zstd;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async (resolve) => {\n        const zstd2 = new ZSTDDecoder();\n        await zstd2.init();\n        resolve(zstd2);\n      });\n    }\n    zstd = await _zstd;\n  }\n  const mipmaps = [];\n  for (let levelIndex = 0; levelIndex < container.levels.length; levelIndex++) {\n    const levelWidth = Math.max(1, container.pixelWidth >> levelIndex);\n    const levelHeight = Math.max(1, container.pixelHeight >> levelIndex);\n    const levelDepth = container.pixelDepth ? Math.max(1, container.pixelDepth >> levelIndex) : 0;\n    const level = container.levels[levelIndex];\n    let levelData;\n    if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n      levelData = level.levelData;\n    } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n      levelData = zstd.decode(level.levelData, level.uncompressedByteLength);\n    } else {\n      throw new Error(\"THREE.KTX2Loader: Unsupported supercompressionScheme.\");\n    }\n    let data;\n    if (TYPE_MAP[vkFormat] === FloatType) {\n      data = new Float32Array(\n        levelData.buffer,\n        levelData.byteOffset,\n        levelData.byteLength / Float32Array.BYTES_PER_ELEMENT\n      );\n    } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n      data = new Uint16Array(\n        levelData.buffer,\n        levelData.byteOffset,\n        levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT\n      );\n    } else {\n      data = levelData;\n    }\n    mipmaps.push({\n      data,\n      width: levelWidth,\n      height: levelHeight,\n      depth: levelDepth\n    });\n  }\n  let texture;\n  if (UNCOMPRESSED_FORMATS.has(FORMAT_MAP[vkFormat])) {\n    texture = container.pixelDepth === 0 ? new DataTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight) : new Data3DTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight, container.pixelDepth);\n  } else {\n    if (container.pixelDepth > 0)\n      throw new Error(\"THREE.KTX2Loader: Unsupported pixelDepth.\");\n    texture = new CompressedTexture(mipmaps, container.pixelWidth, container.pixelHeight);\n  }\n  texture.mipmaps = mipmaps;\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.needsUpdate = true;\n  const colorSpace = parseColorSpace(container);\n  if (\"colorSpace\" in texture)\n    texture.colorSpace = colorSpace;\n  else\n    texture.encoding = colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;\n  return Promise.resolve(texture);\n}\nfunction parseColorSpace(container) {\n  const dfd = container.dataFormatDescriptor[0];\n  if (dfd.colorPrimaries === KHR_DF_PRIMARIES_BT709) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : LinearSRGBColorSpace;\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_DISPLAYP3) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? DisplayP3ColorSpace : LinearDisplayP3ColorSpace;\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_UNSPECIFIED) {\n    return NoColorSpace;\n  } else {\n    console.warn(`THREE.KTX2Loader: Unsupported color primaries, \"${dfd.colorPrimaries}\"`);\n    return NoColorSpace;\n  }\n}\nexport {\n  KTX2Loader\n};\n//# sourceMappingURL=KTX2Loader.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}